
Atmega128-ESP8266.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000028e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000021a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  0000028e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000028e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e30  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a23  00000000  00000000  000011c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a22  00000000  00000000  00001be7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000013c  00000000  00000000  0000260c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007a01  00000000  00000000  00002748  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002e9  00000000  00000000  0000a149  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  0000a432  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002c79  00000000  00000000  0000a4aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a3 30       	cpi	r26, 0x03	; 3
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	62 d0       	rcall	.+196    	; 0x16e <main>
  aa:	b5 c0       	rjmp	.+362    	; 0x216 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <lcd_strobe_lcd_e>:

int cursorpos = 0;

void lcd_strobe_lcd_e(void)
{
	PORTC |= (1<<LCD_E);	// E high
  ae:	ab 9a       	sbi	0x15, 3	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	8f ec       	ldi	r24, 0xCF	; 207
  b2:	97 e0       	ldi	r25, 0x07	; 7
  b4:	01 97       	sbiw	r24, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <lcd_strobe_lcd_e+0x6>
  b8:	00 c0       	rjmp	.+0      	; 0xba <lcd_strobe_lcd_e+0xc>
  ba:	00 00       	nop
	_delay_ms(1);
	PORTC &= ~(1<<LCD_E);  	// E low
  bc:	ab 98       	cbi	0x15, 3	; 21
  be:	8f ec       	ldi	r24, 0xCF	; 207
  c0:	97 e0       	ldi	r25, 0x07	; 7
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <lcd_strobe_lcd_e+0x14>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <lcd_strobe_lcd_e+0x1a>
  c8:	00 00       	nop
  ca:	08 95       	ret

000000cc <init_4bits_mode>:
	_delay_ms(1);
}

void init_4bits_mode(void)
{
  cc:	cf 93       	push	r28
	// PORTC output mode and all low (also E and RS pin)
	DDRC = 0xFF;
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
  d2:	15 ba       	out	0x15, r1	; 21

	// Step 2 (table 12)
	PORTC = 0x20;	// function set
  d4:	c0 e2       	ldi	r28, 0x20	; 32
  d6:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
  d8:	ea df       	rcall	.-44     	; 0xae <lcd_strobe_lcd_e>

	// Step 3 (table 12)
	PORTC = 0x20;   // function set
  da:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
  dc:	e8 df       	rcall	.-48     	; 0xae <lcd_strobe_lcd_e>
	PORTC = 0x80;
  de:	80 e8       	ldi	r24, 0x80	; 128
  e0:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
  e2:	e5 df       	rcall	.-54     	; 0xae <lcd_strobe_lcd_e>

	// Step 4 (table 12)
	PORTC = 0x00;   // Display on/off control
  e4:	15 ba       	out	0x15, r1	; 21
	lcd_strobe_lcd_e();
  e6:	e3 df       	rcall	.-58     	; 0xae <lcd_strobe_lcd_e>
	PORTC = 0xF0;
  e8:	80 ef       	ldi	r24, 0xF0	; 240
  ea:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
  ec:	e0 df       	rcall	.-64     	; 0xae <lcd_strobe_lcd_e>

	// Step 4 (table 12)
	PORTC = 0x00;   // Entry mode set
  ee:	15 ba       	out	0x15, r1	; 21
	lcd_strobe_lcd_e();
  f0:	de df       	rcall	.-68     	; 0xae <lcd_strobe_lcd_e>
	PORTC = 0x60;
  f2:	80 e6       	ldi	r24, 0x60	; 96
  f4:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
  f6:	db df       	rcall	.-74     	; 0xae <lcd_strobe_lcd_e>
}
  f8:	cf 91       	pop	r28
  fa:	08 95       	ret

000000fc <lcd_write_data>:
	lcd_write_command(0x02);
	lcd_write_data(c);
}

void lcd_write_data(unsigned char byte)
{
  fc:	cf 93       	push	r28
  fe:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 100:	85 bb       	out	0x15, r24	; 21
	PORTC |= (1<<LCD_RS);
 102:	aa 9a       	sbi	0x15, 2	; 21
	lcd_strobe_lcd_e();
 104:	d4 df       	rcall	.-88     	; 0xae <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 106:	c2 95       	swap	r28
 108:	c0 7f       	andi	r28, 0xF0	; 240
 10a:	c5 bb       	out	0x15, r28	; 21
	PORTC |= (1<<LCD_RS);
 10c:	aa 9a       	sbi	0x15, 2	; 21
	lcd_strobe_lcd_e();
 10e:	cf df       	rcall	.-98     	; 0xae <lcd_strobe_lcd_e>
}
 110:	cf 91       	pop	r28
 112:	08 95       	ret

00000114 <lcd_write_command>:

void lcd_write_command(unsigned char byte)
{
 114:	cf 93       	push	r28
 116:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 118:	85 bb       	out	0x15, r24	; 21
	PORTC &= ~(1<<LCD_RS);
 11a:	aa 98       	cbi	0x15, 2	; 21
	lcd_strobe_lcd_e();
 11c:	c8 df       	rcall	.-112    	; 0xae <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 11e:	c2 95       	swap	r28
 120:	c0 7f       	andi	r28, 0xF0	; 240
 122:	c5 bb       	out	0x15, r28	; 21
	PORTC &= ~(1<<LCD_RS);
 124:	aa 98       	cbi	0x15, 2	; 21
	lcd_strobe_lcd_e();
 126:	c3 df       	rcall	.-122    	; 0xae <lcd_strobe_lcd_e>
}
 128:	cf 91       	pop	r28
 12a:	08 95       	ret

0000012c <USART_Init>:
void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while (!( UCSR0A & (1<<UDRE)));
	/* Put data into buffer, sends the data */
	UDR0 = data;
 12c:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 130:	89 b9       	out	0x09, r24	; 9
 132:	88 e1       	ldi	r24, 0x18	; 24
 134:	8a b9       	out	0x0a, r24	; 10
 136:	8c e0       	ldi	r24, 0x0C	; 12
 138:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 13c:	08 95       	ret

0000013e <USART_Receive>:
}

char USART_Receive( void )
{
	/* Wait for data to be received */
	while (!(UCSR0A & (1<<RXC)));
 13e:	5f 9b       	sbis	0x0b, 7	; 11
 140:	fe cf       	rjmp	.-4      	; 0x13e <USART_Receive>
	/* Get and return received data from buffer */
	received = UDR0;
 142:	8c b1       	in	r24, 0x0c	; 12
 144:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <received>
	return UDR0;
 148:	8c b1       	in	r24, 0x0c	; 12
}
 14a:	08 95       	ret

0000014c <wait>:

void wait( int ms )
{
	for (int i=0; i<ms; i++)
 14c:	18 16       	cp	r1, r24
 14e:	19 06       	cpc	r1, r25
 150:	6c f4       	brge	.+26     	; 0x16c <wait+0x20>
 152:	20 e0       	ldi	r18, 0x00	; 0
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	ef ec       	ldi	r30, 0xCF	; 207
 158:	f7 e0       	ldi	r31, 0x07	; 7
 15a:	31 97       	sbiw	r30, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <wait+0xe>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <wait+0x14>
 160:	00 00       	nop
 162:	2f 5f       	subi	r18, 0xFF	; 255
 164:	3f 4f       	sbci	r19, 0xFF	; 255
 166:	28 17       	cp	r18, r24
 168:	39 07       	cpc	r19, r25
 16a:	a9 f7       	brne	.-22     	; 0x156 <wait+0xa>
 16c:	08 95       	ret

0000016e <main>:
void wait (int ms);

int main( void )
{
	// Init I/O
	DDRD = 0xF8;			// PORTD(7) output, PORTD(6:0) input
 16e:	88 ef       	ldi	r24, 0xF8	; 248
 170:	81 bb       	out	0x11, r24	; 17
	// Init LCD
	init_4bits_mode();
 172:	ac df       	rcall	.-168    	; 0xcc <init_4bits_mode>
	
	//char str[ARRAYSIZE] = "kadir";
	//int strLenght = ARRAYSIZE;
	//int i = 0;
	
	DDRD = 0b11111111;
 174:	cf ef       	ldi	r28, 0xFF	; 255
 176:	c1 bb       	out	0x11, r28	; 17
	
	USART_Init ( MYUBRR );
 178:	83 e0       	ldi	r24, 0x03	; 3
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	d7 df       	rcall	.-82     	; 0x12c <USART_Init>
	//USART_Transmit('S' );
	PORTD= 0xFF;
 17e:	c2 bb       	out	0x12, r28	; 18
	wait(1000);
 180:	88 ee       	ldi	r24, 0xE8	; 232
 182:	93 e0       	ldi	r25, 0x03	; 3
 184:	e3 df       	rcall	.-58     	; 0x14c <wait>
	PORTD = 0x00;
 186:	12 ba       	out	0x12, r1	; 18
	lcd_write_command(0x01);
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	c4 df       	rcall	.-120    	; 0x114 <lcd_write_command>
	lcd_write_command(0x02);
 18c:	82 e0       	ldi	r24, 0x02	; 2
 18e:	c2 df       	rcall	.-124    	; 0x114 <lcd_write_command>
	{
		//USART_Transmit( str[i] );
		//i++;
		//if(i >= strLenght)
		//	i = 0;
		USART_Receive();
 190:	d6 df       	rcall	.-84     	; 0x13e <USART_Receive>
		if(received >= 97 && received <=122)
 192:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <received>
 196:	9f e9       	ldi	r25, 0x9F	; 159
 198:	98 0f       	add	r25, r24
 19a:	9a 31       	cpi	r25, 0x1A	; 26
 19c:	18 f4       	brcc	.+6      	; 0x1a4 <main+0x36>
			received = received - 32;
 19e:	80 52       	subi	r24, 0x20	; 32
 1a0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <received>
		if(toupper(received)=='Z')
 1a4:	c0 91 02 01 	lds	r28, 0x0102	; 0x800102 <received>
 1a8:	8c 2f       	mov	r24, r28
 1aa:	0c 2e       	mov	r0, r28
 1ac:	00 0c       	add	r0, r0
 1ae:	99 0b       	sbc	r25, r25
 1b0:	2a d0       	rcall	.+84     	; 0x206 <toupper>
 1b2:	8a 35       	cpi	r24, 0x5A	; 90
 1b4:	91 05       	cpc	r25, r1
 1b6:	49 f4       	brne	.+18     	; 0x1ca <main+0x5c>
		{
			lcd_write_command(0x01);
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	ac df       	rcall	.-168    	; 0x114 <lcd_write_command>
			lcd_write_command(0x02);
 1bc:	82 e0       	ldi	r24, 0x02	; 2
 1be:	aa df       	rcall	.-172    	; 0x114 <lcd_write_command>
			arrayPos = 0;
 1c0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 1c4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 1c8:	e3 cf       	rjmp	.-58     	; 0x190 <main+0x22>
		}
		else if(received<32 || received > 125 || received == 127)
 1ca:	c0 52       	subi	r28, 0x20	; 32
 1cc:	ce 35       	cpi	r28, 0x5E	; 94
 1ce:	00 f7       	brcc	.-64     	; 0x190 <main+0x22>
		{
		}
		else
		{
			if(arrayPos == ARRAYSIZE)
 1d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1d4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1d8:	0e 97       	sbiw	r24, 0x0e	; 14
 1da:	41 f4       	brne	.+16     	; 0x1ec <main+0x7e>
			{
				lcd_write_command(0x01);
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	9a df       	rcall	.-204    	; 0x114 <lcd_write_command>
				lcd_write_command(0x02);
 1e0:	82 e0       	ldi	r24, 0x02	; 2
 1e2:	98 df       	rcall	.-208    	; 0x114 <lcd_write_command>
				arrayPos = 0;
 1e4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 1e8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			}
			lcd_write_data(received);//toupper(received));
 1ec:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <received>
 1f0:	85 df       	rcall	.-246    	; 0xfc <lcd_write_data>
			arrayPos++;
 1f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1f6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1fa:	01 96       	adiw	r24, 0x01	; 1
 1fc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 200:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 204:	c5 cf       	rjmp	.-118    	; 0x190 <main+0x22>

00000206 <toupper>:
 206:	91 11       	cpse	r25, r1
 208:	08 95       	ret
 20a:	81 56       	subi	r24, 0x61	; 97
 20c:	8a 51       	subi	r24, 0x1A	; 26
 20e:	08 f4       	brcc	.+2      	; 0x212 <toupper+0xc>
 210:	80 52       	subi	r24, 0x20	; 32
 212:	85 58       	subi	r24, 0x85	; 133
 214:	08 95       	ret

00000216 <_exit>:
 216:	f8 94       	cli

00000218 <__stop_program>:
 218:	ff cf       	rjmp	.-2      	; 0x218 <__stop_program>
