
AssignmentB2counter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000220  000002b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000220  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  000002b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000df2  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a20  00000000  00000000  000011b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c35  00000000  00000000  00001bd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000124  00000000  00000000  0000280c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00008079  00000000  00000000  00002930  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000208  00000000  00000000  0000a9a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  0000abb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000031bd  00000000  00000000  0000ac21  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	a7 c0       	rjmp	.+334    	; 0x178 <__vector_10>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e2       	ldi	r30, 0x20	; 32
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 30       	cpi	r26, 0x04	; 4
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	73 d0       	rcall	.+230    	; 0x1aa <main>
  c4:	ab c0       	rjmp	.+342    	; 0x21c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <lcd_strobe_lcd_e>:
	 lcd_strobe_lcd_e();
 }

 void lcd_display_text(char *str)
 {
	lcd_write_string(str);
  c8:	ab 9a       	sbi	0x15, 3	; 21
  ca:	8f ec       	ldi	r24, 0xCF	; 207
  cc:	97 e0       	ldi	r25, 0x07	; 7
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <lcd_strobe_lcd_e+0x6>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <lcd_strobe_lcd_e+0xc>
  d4:	00 00       	nop
  d6:	ab 98       	cbi	0x15, 3	; 21
  d8:	8f ec       	ldi	r24, 0xCF	; 207
  da:	97 e0       	ldi	r25, 0x07	; 7
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <lcd_strobe_lcd_e+0x14>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <lcd_strobe_lcd_e+0x1a>
  e2:	00 00       	nop
  e4:	08 95       	ret

000000e6 <init_4bits_mode>:
  e6:	cf 93       	push	r28
  e8:	8f ef       	ldi	r24, 0xFF	; 255
  ea:	84 bb       	out	0x14, r24	; 20
  ec:	15 ba       	out	0x15, r1	; 21
  ee:	c0 e2       	ldi	r28, 0x20	; 32
  f0:	c5 bb       	out	0x15, r28	; 21
  f2:	ea df       	rcall	.-44     	; 0xc8 <lcd_strobe_lcd_e>
  f4:	c5 bb       	out	0x15, r28	; 21
  f6:	e8 df       	rcall	.-48     	; 0xc8 <lcd_strobe_lcd_e>
  f8:	80 e8       	ldi	r24, 0x80	; 128
  fa:	85 bb       	out	0x15, r24	; 21
  fc:	e5 df       	rcall	.-54     	; 0xc8 <lcd_strobe_lcd_e>
  fe:	15 ba       	out	0x15, r1	; 21
 100:	e3 df       	rcall	.-58     	; 0xc8 <lcd_strobe_lcd_e>
 102:	80 ef       	ldi	r24, 0xF0	; 240
 104:	85 bb       	out	0x15, r24	; 21
 106:	e0 df       	rcall	.-64     	; 0xc8 <lcd_strobe_lcd_e>
 108:	15 ba       	out	0x15, r1	; 21
 10a:	de df       	rcall	.-68     	; 0xc8 <lcd_strobe_lcd_e>
 10c:	80 e6       	ldi	r24, 0x60	; 96
 10e:	85 bb       	out	0x15, r24	; 21
 110:	db df       	rcall	.-74     	; 0xc8 <lcd_strobe_lcd_e>
 112:	cf 91       	pop	r28
 114:	08 95       	ret

00000116 <lcd_write_data>:
 116:	cf 93       	push	r28
 118:	c8 2f       	mov	r28, r24
 11a:	85 bb       	out	0x15, r24	; 21
 11c:	aa 9a       	sbi	0x15, 2	; 21
 11e:	d4 df       	rcall	.-88     	; 0xc8 <lcd_strobe_lcd_e>
 120:	c2 95       	swap	r28
 122:	c0 7f       	andi	r28, 0xF0	; 240
 124:	c5 bb       	out	0x15, r28	; 21
 126:	aa 9a       	sbi	0x15, 2	; 21
 128:	cf df       	rcall	.-98     	; 0xc8 <lcd_strobe_lcd_e>
 12a:	cf 91       	pop	r28
 12c:	08 95       	ret

0000012e <lcd_write_string>:
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	ec 01       	movw	r28, r24
 134:	88 81       	ld	r24, Y
 136:	88 23       	and	r24, r24
 138:	29 f0       	breq	.+10     	; 0x144 <lcd_write_string+0x16>
 13a:	21 96       	adiw	r28, 0x01	; 1
 13c:	ec df       	rcall	.-40     	; 0x116 <lcd_write_data>
 13e:	89 91       	ld	r24, Y+
 140:	81 11       	cpse	r24, r1
 142:	fc cf       	rjmp	.-8      	; 0x13c <lcd_write_string+0xe>
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <lcd_write_cmd>:
 14a:	cf 93       	push	r28
 14c:	c8 2f       	mov	r28, r24
 14e:	85 bb       	out	0x15, r24	; 21
 150:	aa 98       	cbi	0x15, 2	; 21
 152:	ba df       	rcall	.-140    	; 0xc8 <lcd_strobe_lcd_e>
 154:	c2 95       	swap	r28
 156:	c0 7f       	andi	r28, 0xF0	; 240
 158:	c5 bb       	out	0x15, r28	; 21
 15a:	aa 98       	cbi	0x15, 2	; 21
 15c:	b5 df       	rcall	.-150    	; 0xc8 <lcd_strobe_lcd_e>
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <lcd_init>:
 }

 void lcd_init()
 {
	init_4bits_mode();
 162:	c1 cf       	rjmp	.-126    	; 0xe6 <init_4bits_mode>
 164:	08 95       	ret

00000166 <timer2init>:

int counter = 0;

 void timer2init(void)
 {
	TIMSK |= (1<<TOIE2);
 166:	87 b7       	in	r24, 0x37	; 55
 168:	80 64       	ori	r24, 0x40	; 64
 16a:	87 bf       	out	0x37, r24	; 55
	sei();
 16c:	78 94       	sei
	TCNT2 = 0xFF;
 16e:	8f ef       	ldi	r24, 0xFF	; 255
 170:	84 bd       	out	0x24, r24	; 36
	TCCR2 = 0b00011111;
 172:	8f e1       	ldi	r24, 0x1F	; 31
 174:	85 bd       	out	0x25, r24	; 37
 176:	08 95       	ret

00000178 <__vector_10>:
 }

 ISR(TIMER2_OVF_vect)
 {
 178:	1f 92       	push	r1
 17a:	0f 92       	push	r0
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	0f 92       	push	r0
 180:	11 24       	eor	r1, r1
 182:	8f 93       	push	r24
 184:	9f 93       	push	r25
	TCNT2 = 0xFF;
 186:	8f ef       	ldi	r24, 0xFF	; 255
 188:	84 bd       	out	0x24, r24	; 36
	counter++;
 18a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 18e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 192:	01 96       	adiw	r24, 0x01	; 1
 194:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 198:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <main>:
#include <stdlib.h>
#include <stdio.h>

int main ( void )
{
	lcd_init();
 1aa:	db df       	rcall	.-74     	; 0x162 <lcd_init>

	lcd_write_cmd(0);
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	cd df       	rcall	.-102    	; 0x14a <lcd_write_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b0:	8f e3       	ldi	r24, 0x3F	; 63
 1b2:	9c e9       	ldi	r25, 0x9C	; 156
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <main+0xa>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <main+0x10>
 1ba:	00 00       	nop
	_delay_ms(20);

	lcd_write_cmd(1);
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	c5 df       	rcall	.-118    	; 0x14a <lcd_write_cmd>
 1c0:	8f e3       	ldi	r24, 0x3F	; 63
 1c2:	9c e9       	ldi	r25, 0x9C	; 156
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <main+0x1a>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <main+0x20>
 1ca:	00 00       	nop
	_delay_ms(20);
		
	lcd_write_string("0");
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	91 e0       	ldi	r25, 0x01	; 1
 1d0:	ae df       	rcall	.-164    	; 0x12e <lcd_write_string>
 1d2:	8f e3       	ldi	r24, 0x3F	; 63
 1d4:	9c e9       	ldi	r25, 0x9C	; 156
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <main+0x2c>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <main+0x32>
 1dc:	00 00       	nop
	_delay_ms(20);
	
	lcd_strobe_lcd_e();
 1de:	74 df       	rcall	.-280    	; 0xc8 <lcd_strobe_lcd_e>
	//int direction = 1;
	
	//DDRD = 	0b00000000;
	//PORTA = 1;

	timer2init();
 1e0:	c2 df       	rcall	.-124    	; 0x166 <timer2init>
	//TCCR1B |= ((1 << CS10 ) | (1 << CS11 )) ; // Set up timer at Fcpu /64
	int oldcounter = 0;
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	90 e0       	ldi	r25, 0x00	; 0
	while(1)
	{
	
		if(oldcounter != counter)
 1e6:	c0 91 02 01 	lds	r28, 0x0102	; 0x800102 <__data_end>
 1ea:	d0 91 03 01 	lds	r29, 0x0103	; 0x800103 <__data_end+0x1>
 1ee:	8c 17       	cp	r24, r28
 1f0:	9d 07       	cpc	r25, r29
 1f2:	e9 f3       	breq	.-6      	; 0x1ee <main+0x44>
		{
			oldcounter = counter;
			lcd_write_cmd(0);
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	a9 df       	rcall	.-174    	; 0x14a <lcd_write_cmd>
			lcd_write_cmd(1);
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	a7 df       	rcall	.-178    	; 0x14a <lcd_write_cmd>
			lcd_write_string((char *)counter);
 1fc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 200:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 204:	94 df       	rcall	.-216    	; 0x12e <lcd_write_string>
 206:	9f e7       	ldi	r25, 0x7F	; 127
 208:	28 e3       	ldi	r18, 0x38	; 56
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	91 50       	subi	r25, 0x01	; 1
 20e:	20 40       	sbci	r18, 0x00	; 0
 210:	80 40       	sbci	r24, 0x00	; 0
 212:	e1 f7       	brne	.-8      	; 0x20c <main+0x62>
 214:	00 c0       	rjmp	.+0      	; 0x216 <main+0x6c>
 216:	00 00       	nop
	//TCCR1B |= ((1 << CS10 ) | (1 << CS11 )) ; // Set up timer at Fcpu /64
	int oldcounter = 0;
	while(1)
	{
	
		if(oldcounter != counter)
 218:	ce 01       	movw	r24, r28
 21a:	e5 cf       	rjmp	.-54     	; 0x1e6 <main+0x3c>

0000021c <_exit>:
 21c:	f8 94       	cli

0000021e <__stop_program>:
 21e:	ff cf       	rjmp	.-2      	; 0x21e <__stop_program>
