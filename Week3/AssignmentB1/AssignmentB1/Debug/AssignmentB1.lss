
AssignmentB1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000232  000002c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000232  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010c  0080010c  000002d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000304  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cdb  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a1d  00000000  00000000  00001093  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000059c  00000000  00000000  00001ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  0000204c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ce  00000000  00000000  00002140  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000275  00000000  00000000  0000260e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002883  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e3       	ldi	r30, 0x32	; 50
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 30       	cpi	r26, 0x0E	; 14
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	91 d0       	rcall	.+290    	; 0x1e6 <main>
  c4:	b4 c0       	rjmp	.+360    	; 0x22e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <lcd_strobe_lcd_e>:
	lcd_write_command(0x02);
	while(*str)
	{
		lcd_write_data(*str++);
	}
}
  c8:	ab 9a       	sbi	0x15, 3	; 21
  ca:	8f ec       	ldi	r24, 0xCF	; 207
  cc:	97 e0       	ldi	r25, 0x07	; 7
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <lcd_strobe_lcd_e+0x6>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <lcd_strobe_lcd_e+0xc>
  d4:	00 00       	nop
  d6:	ab 98       	cbi	0x15, 3	; 21
  d8:	8f ec       	ldi	r24, 0xCF	; 207
  da:	97 e0       	ldi	r25, 0x07	; 7
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <lcd_strobe_lcd_e+0x14>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <lcd_strobe_lcd_e+0x1a>
  e2:	00 00       	nop
  e4:	08 95       	ret

000000e6 <init_4bits_mode>:
  e6:	cf 93       	push	r28
  e8:	8f ef       	ldi	r24, 0xFF	; 255
  ea:	84 bb       	out	0x14, r24	; 20
  ec:	15 ba       	out	0x15, r1	; 21
  ee:	c0 e2       	ldi	r28, 0x20	; 32
  f0:	c5 bb       	out	0x15, r28	; 21
  f2:	ea df       	rcall	.-44     	; 0xc8 <lcd_strobe_lcd_e>
  f4:	c5 bb       	out	0x15, r28	; 21
  f6:	e8 df       	rcall	.-48     	; 0xc8 <lcd_strobe_lcd_e>
  f8:	80 e8       	ldi	r24, 0x80	; 128
  fa:	85 bb       	out	0x15, r24	; 21
  fc:	e5 df       	rcall	.-54     	; 0xc8 <lcd_strobe_lcd_e>
  fe:	15 ba       	out	0x15, r1	; 21
 100:	e3 df       	rcall	.-58     	; 0xc8 <lcd_strobe_lcd_e>
 102:	80 ef       	ldi	r24, 0xF0	; 240
 104:	85 bb       	out	0x15, r24	; 21
 106:	e0 df       	rcall	.-64     	; 0xc8 <lcd_strobe_lcd_e>
 108:	15 ba       	out	0x15, r1	; 21
 10a:	de df       	rcall	.-68     	; 0xc8 <lcd_strobe_lcd_e>
 10c:	80 e6       	ldi	r24, 0x60	; 96
 10e:	85 bb       	out	0x15, r24	; 21
 110:	db df       	rcall	.-74     	; 0xc8 <lcd_strobe_lcd_e>
 112:	cf 91       	pop	r28
 114:	08 95       	ret

00000116 <lcd_write_data>:
 116:	cf 93       	push	r28
 118:	c8 2f       	mov	r28, r24
 11a:	85 bb       	out	0x15, r24	; 21
 11c:	aa 9a       	sbi	0x15, 2	; 21
 11e:	d4 df       	rcall	.-88     	; 0xc8 <lcd_strobe_lcd_e>
 120:	c2 95       	swap	r28
 122:	c0 7f       	andi	r28, 0xF0	; 240
 124:	c5 bb       	out	0x15, r28	; 21
 126:	aa 9a       	sbi	0x15, 2	; 21
 128:	cf df       	rcall	.-98     	; 0xc8 <lcd_strobe_lcd_e>
 12a:	cf 91       	pop	r28
 12c:	08 95       	ret

0000012e <lcd_write_command>:
 12e:	cf 93       	push	r28
 130:	c8 2f       	mov	r28, r24
 132:	85 bb       	out	0x15, r24	; 21
 134:	aa 98       	cbi	0x15, 2	; 21
 136:	c8 df       	rcall	.-112    	; 0xc8 <lcd_strobe_lcd_e>
 138:	c2 95       	swap	r28
 13a:	c0 7f       	andi	r28, 0xF0	; 240
 13c:	c5 bb       	out	0x15, r28	; 21
 13e:	aa 98       	cbi	0x15, 2	; 21
 140:	c3 df       	rcall	.-122    	; 0xc8 <lcd_strobe_lcd_e>
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <lcd_write_string>:
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	ec 01       	movw	r28, r24
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	ee df       	rcall	.-36     	; 0x12e <lcd_write_command>
 152:	82 e0       	ldi	r24, 0x02	; 2
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	eb df       	rcall	.-42     	; 0x12e <lcd_write_command>
 158:	88 81       	ld	r24, Y
 15a:	88 23       	and	r24, r24
 15c:	79 f0       	breq	.+30     	; 0x17c <lcd_write_string+0x36>
 15e:	21 96       	adiw	r28, 0x01	; 1
 160:	da df       	rcall	.-76     	; 0x116 <lcd_write_data>
 162:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__data_end>
 166:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__data_end+0x1>
 16a:	2f 5f       	subi	r18, 0xFF	; 255
 16c:	3f 4f       	sbci	r19, 0xFF	; 255
 16e:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <__data_end+0x1>
 172:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <__data_end>
 176:	89 91       	ld	r24, Y+
 178:	81 11       	cpse	r24, r1
 17a:	f2 cf       	rjmp	.-28     	; 0x160 <lcd_write_string+0x1a>
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	08 95       	ret

00000182 <set_cursor>:

void set_cursor(int position)
{
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
	if(cursorpos==position)
 186:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__data_end>
 18a:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__data_end+0x1>
 18e:	28 17       	cp	r18, r24
 190:	39 07       	cpc	r19, r25
 192:	31 f1       	breq	.+76     	; 0x1e0 <set_cursor+0x5e>
 194:	ec 01       	movw	r28, r24
	{
		
	}
	else if(cursorpos>position)
 196:	82 17       	cp	r24, r18
 198:	93 07       	cpc	r25, r19
 19a:	84 f4       	brge	.+32     	; 0x1bc <set_cursor+0x3a>
	{
		while (cursorpos>position)
		{
			lcd_write_command(0x10);
 19c:	80 e1       	ldi	r24, 0x10	; 16
 19e:	c7 df       	rcall	.-114    	; 0x12e <lcd_write_command>
			cursorpos--;
 1a0:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__data_end>
 1a4:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__data_end+0x1>
 1a8:	21 50       	subi	r18, 0x01	; 1
 1aa:	31 09       	sbc	r19, r1
 1ac:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <__data_end+0x1>
 1b0:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <__data_end>
	{
		
	}
	else if(cursorpos>position)
	{
		while (cursorpos>position)
 1b4:	c2 17       	cp	r28, r18
 1b6:	d3 07       	cpc	r29, r19
 1b8:	8c f3       	brlt	.-30     	; 0x19c <set_cursor+0x1a>
 1ba:	12 c0       	rjmp	.+36     	; 0x1e0 <set_cursor+0x5e>
		{
			lcd_write_command(0x10);
			cursorpos--;
		}
	}
	else if(cursorpos<position)
 1bc:	28 17       	cp	r18, r24
 1be:	39 07       	cpc	r19, r25
 1c0:	7c f4       	brge	.+30     	; 0x1e0 <set_cursor+0x5e>
	{
		while (cursorpos<position)
		{
			lcd_write_command(0x14);
 1c2:	84 e1       	ldi	r24, 0x14	; 20
 1c4:	b4 df       	rcall	.-152    	; 0x12e <lcd_write_command>
			cursorpos++;
 1c6:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__data_end>
 1ca:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__data_end+0x1>
 1ce:	2f 5f       	subi	r18, 0xFF	; 255
 1d0:	3f 4f       	sbci	r19, 0xFF	; 255
 1d2:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <__data_end+0x1>
 1d6:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <__data_end>
			cursorpos--;
		}
	}
	else if(cursorpos<position)
	{
		while (cursorpos<position)
 1da:	2c 17       	cp	r18, r28
 1dc:	3d 07       	cpc	r19, r29
 1de:	8c f3       	brlt	.-30     	; 0x1c2 <set_cursor+0x40>
		{
			lcd_write_command(0x14);
			cursorpos++;
		}
	}
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	08 95       	ret

000001e6 <main>:


int main(void)
{
	// Init I/O
	DDRD = 0xF8;			// PORTD(7) output, PORTD(6:0) input
 1e6:	88 ef       	ldi	r24, 0xF8	; 248
 1e8:	81 bb       	out	0x11, r24	; 17

	// Init LCD
	init_4bits_mode();
 1ea:	7d df       	rcall	.-262    	; 0xe6 <init_4bits_mode>

	// Write sample string
	lcd_write_string("Kadir Seker");
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	91 e0       	ldi	r25, 0x01	; 1
 1f0:	aa df       	rcall	.-172    	; 0x146 <lcd_write_string>

	// Loop forever
	while (1)
	{
		if(PIND & 1)
 1f2:	80 9b       	sbis	0x10, 0	; 16
 1f4:	07 c0       	rjmp	.+14     	; 0x204 <main+0x1e>
		{
			set_cursor(cursorpos-1);
 1f6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 1fa:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	c0 df       	rcall	.-128    	; 0x182 <set_cursor>
 202:	08 c0       	rjmp	.+16     	; 0x214 <main+0x2e>
		}
		else if (PIND & 4)
 204:	82 9b       	sbis	0x10, 2	; 16
 206:	06 c0       	rjmp	.+12     	; 0x214 <main+0x2e>
		{
			set_cursor(cursorpos+1);
 208:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 20c:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 210:	01 96       	adiw	r24, 0x01	; 1
 212:	b7 df       	rcall	.-146    	; 0x182 <set_cursor>
		}
		PORTD ^= (1<<7);	// Toggle PORTD.7
 214:	82 b3       	in	r24, 0x12	; 18
 216:	80 58       	subi	r24, 0x80	; 128
 218:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21a:	2f e7       	ldi	r18, 0x7F	; 127
 21c:	8a e1       	ldi	r24, 0x1A	; 26
 21e:	96 e0       	ldi	r25, 0x06	; 6
 220:	21 50       	subi	r18, 0x01	; 1
 222:	80 40       	sbci	r24, 0x00	; 0
 224:	90 40       	sbci	r25, 0x00	; 0
 226:	e1 f7       	brne	.-8      	; 0x220 <main+0x3a>
 228:	00 c0       	rjmp	.+0      	; 0x22a <main+0x44>
 22a:	00 00       	nop
 22c:	e2 cf       	rjmp	.-60     	; 0x1f2 <main+0xc>

0000022e <_exit>:
 22e:	f8 94       	cli

00000230 <__stop_program>:
 230:	ff cf       	rjmp	.-2      	; 0x230 <__stop_program>
