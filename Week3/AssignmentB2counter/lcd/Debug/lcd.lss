
lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000268  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000002dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000030c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000edc  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ae5  00000000  00000000  000012f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fe7  00000000  00000000  00001dd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  00002dc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000080bf  00000000  00000000  00002f54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002fc  00000000  00000000  0000b013  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  0000b30f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003297  00000000  00000000  0000b39f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	dc c0       	rjmp	.+440    	; 0x1de <__vector_9>
  26:	00 00       	nop
  28:	c7 c0       	rjmp	.+398    	; 0x1b8 <__vector_10>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a3 30       	cpi	r26, 0x03	; 3
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	b4 d0       	rcall	.+360    	; 0x212 <main>
  aa:	dc c0       	rjmp	.+440    	; 0x264 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <lcd_strobe_lcd_e>:
	lcd_write_command(0x02);
	while(*str)
	{
		lcd_write_data(*str++);
	}
}
  ae:	ab 9a       	sbi	0x15, 3	; 21
  b0:	8f ec       	ldi	r24, 0xCF	; 207
  b2:	97 e0       	ldi	r25, 0x07	; 7
  b4:	01 97       	sbiw	r24, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <lcd_strobe_lcd_e+0x6>
  b8:	00 c0       	rjmp	.+0      	; 0xba <lcd_strobe_lcd_e+0xc>
  ba:	00 00       	nop
  bc:	ab 98       	cbi	0x15, 3	; 21
  be:	8f ec       	ldi	r24, 0xCF	; 207
  c0:	97 e0       	ldi	r25, 0x07	; 7
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <lcd_strobe_lcd_e+0x14>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <lcd_strobe_lcd_e+0x1a>
  c8:	00 00       	nop
  ca:	08 95       	ret

000000cc <init_4bits_mode>:
  cc:	cf 93       	push	r28
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	84 bb       	out	0x14, r24	; 20
  d2:	15 ba       	out	0x15, r1	; 21
  d4:	c0 e2       	ldi	r28, 0x20	; 32
  d6:	c5 bb       	out	0x15, r28	; 21
  d8:	ea df       	rcall	.-44     	; 0xae <lcd_strobe_lcd_e>
  da:	c5 bb       	out	0x15, r28	; 21
  dc:	e8 df       	rcall	.-48     	; 0xae <lcd_strobe_lcd_e>
  de:	80 e8       	ldi	r24, 0x80	; 128
  e0:	85 bb       	out	0x15, r24	; 21
  e2:	e5 df       	rcall	.-54     	; 0xae <lcd_strobe_lcd_e>
  e4:	15 ba       	out	0x15, r1	; 21
  e6:	e3 df       	rcall	.-58     	; 0xae <lcd_strobe_lcd_e>
  e8:	80 ef       	ldi	r24, 0xF0	; 240
  ea:	85 bb       	out	0x15, r24	; 21
  ec:	e0 df       	rcall	.-64     	; 0xae <lcd_strobe_lcd_e>
  ee:	15 ba       	out	0x15, r1	; 21
  f0:	de df       	rcall	.-68     	; 0xae <lcd_strobe_lcd_e>
  f2:	80 e6       	ldi	r24, 0x60	; 96
  f4:	85 bb       	out	0x15, r24	; 21
  f6:	db df       	rcall	.-74     	; 0xae <lcd_strobe_lcd_e>
  f8:	cf 91       	pop	r28
  fa:	08 95       	ret

000000fc <lcd_assignmentb2>:
  fc:	cf 93       	push	r28
  fe:	c8 2f       	mov	r28, r24
 100:	85 bb       	out	0x15, r24	; 21
 102:	aa 9a       	sbi	0x15, 2	; 21
 104:	d4 df       	rcall	.-88     	; 0xae <lcd_strobe_lcd_e>
 106:	c2 95       	swap	r28
 108:	c0 7f       	andi	r28, 0xF0	; 240
 10a:	c5 bb       	out	0x15, r28	; 21
 10c:	aa 9a       	sbi	0x15, 2	; 21
 10e:	cf df       	rcall	.-98     	; 0xae <lcd_strobe_lcd_e>
 110:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 114:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 118:	01 96       	adiw	r24, 0x01	; 1
 11a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 11e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 122:	cf 91       	pop	r28
 124:	08 95       	ret

00000126 <lcd_write_command>:
 126:	cf 93       	push	r28
 128:	c8 2f       	mov	r28, r24
 12a:	85 bb       	out	0x15, r24	; 21
 12c:	aa 98       	cbi	0x15, 2	; 21
 12e:	bf df       	rcall	.-130    	; 0xae <lcd_strobe_lcd_e>
 130:	c2 95       	swap	r28
 132:	c0 7f       	andi	r28, 0xF0	; 240
 134:	c5 bb       	out	0x15, r28	; 21
 136:	aa 98       	cbi	0x15, 2	; 21
 138:	ba df       	rcall	.-140    	; 0xae <lcd_strobe_lcd_e>
 13a:	cf 91       	pop	r28
 13c:	08 95       	ret

0000013e <set_cursor>:

void set_cursor(int position)
{
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
	if(cursorpos==position)
 142:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 146:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 14a:	28 17       	cp	r18, r24
 14c:	39 07       	cpc	r19, r25
 14e:	31 f1       	breq	.+76     	; 0x19c <set_cursor+0x5e>
 150:	ec 01       	movw	r28, r24
	{
		
	}
	else if(cursorpos>position)
 152:	82 17       	cp	r24, r18
 154:	93 07       	cpc	r25, r19
 156:	84 f4       	brge	.+32     	; 0x178 <set_cursor+0x3a>
	{
		while (cursorpos>position)
		{
			lcd_write_command(0x10);
 158:	80 e1       	ldi	r24, 0x10	; 16
 15a:	e5 df       	rcall	.-54     	; 0x126 <lcd_write_command>
			cursorpos--;
 15c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 160:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 164:	21 50       	subi	r18, 0x01	; 1
 166:	31 09       	sbc	r19, r1
 168:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <_edata+0x1>
 16c:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
	{
		
	}
	else if(cursorpos>position)
	{
		while (cursorpos>position)
 170:	c2 17       	cp	r28, r18
 172:	d3 07       	cpc	r29, r19
 174:	8c f3       	brlt	.-30     	; 0x158 <set_cursor+0x1a>
 176:	12 c0       	rjmp	.+36     	; 0x19c <set_cursor+0x5e>
		{
			lcd_write_command(0x10);
			cursorpos--;
		}
	}
	else if(cursorpos<position)
 178:	28 17       	cp	r18, r24
 17a:	39 07       	cpc	r19, r25
 17c:	7c f4       	brge	.+30     	; 0x19c <set_cursor+0x5e>
	{
		while (cursorpos<position)
		{
			lcd_write_command(0x14);
 17e:	84 e1       	ldi	r24, 0x14	; 20
 180:	d2 df       	rcall	.-92     	; 0x126 <lcd_write_command>
			cursorpos++;
 182:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 186:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 18a:	2f 5f       	subi	r18, 0xFF	; 255
 18c:	3f 4f       	sbci	r19, 0xFF	; 255
 18e:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <_edata+0x1>
 192:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
			cursorpos--;
		}
	}
	else if(cursorpos<position)
	{
		while (cursorpos<position)
 196:	2c 17       	cp	r18, r28
 198:	3d 07       	cpc	r19, r29
 19a:	8c f3       	brlt	.-30     	; 0x17e <set_cursor+0x40>
		{
			lcd_write_command(0x14);
			cursorpos++;
		}
	}
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	08 95       	ret

000001a2 <getCounterValue>:
unsigned char counter = 0;

 char* getCounterValue(void)
 {
	return &counter;
 }
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	91 e0       	ldi	r25, 0x01	; 1
 1a6:	08 95       	ret

000001a8 <timer2init>:

 void timer2init(void)
 {
	TIMSK |= (1<<TOIE2);
 1a8:	87 b7       	in	r24, 0x37	; 55
 1aa:	80 64       	ori	r24, 0x40	; 64
 1ac:	87 bf       	out	0x37, r24	; 55
	TCNT2 = 0xFF;
 1ae:	8f ef       	ldi	r24, 0xFF	; 255
 1b0:	84 bd       	out	0x24, r24	; 36
	TCCR2 = 0b00000111;
 1b2:	87 e0       	ldi	r24, 0x07	; 7
 1b4:	85 bd       	out	0x25, r24	; 37
 1b6:	08 95       	ret

000001b8 <__vector_10>:
 }

 ISR(TIMER2_OVF_vect)
 {
 1b8:	1f 92       	push	r1
 1ba:	0f 92       	push	r0
 1bc:	0f b6       	in	r0, 0x3f	; 63
 1be:	0f 92       	push	r0
 1c0:	11 24       	eor	r1, r1
 1c2:	8f 93       	push	r24
	TCNT2 = 0xFF;
 1c4:	8f ef       	ldi	r24, 0xFF	; 255
 1c6:	84 bd       	out	0x24, r24	; 36
	counter++;
 1c8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <counter>
 1cc:	8f 5f       	subi	r24, 0xFF	; 255
 1ce:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <counter>
 1d2:	8f 91       	pop	r24
 1d4:	0f 90       	pop	r0
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	0f 90       	pop	r0
 1da:	1f 90       	pop	r1
 1dc:	18 95       	reti

000001de <__vector_9>:
	  TCCR2 = 0b00011101;
	  OCR2 = COMPVALUE1;
  }

  ISR(TIMER2_COMP_vect)
  {
 1de:	1f 92       	push	r1
 1e0:	0f 92       	push	r0
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	0f 92       	push	r0
 1e6:	11 24       	eor	r1, r1
 1e8:	8f 93       	push	r24
	  if(OCR2 == COMPVALUE1)
 1ea:	83 b5       	in	r24, 0x23	; 35
 1ec:	85 37       	cpi	r24, 0x75	; 117
 1ee:	29 f4       	brne	.+10     	; 0x1fa <__vector_9+0x1c>
	  {
		OCR2 = COMPVALUE2;
 1f0:	83 ec       	ldi	r24, 0xC3	; 195
 1f2:	83 bd       	out	0x23, r24	; 35
		PORTD = 0b10000000;
 1f4:	80 e8       	ldi	r24, 0x80	; 128
 1f6:	82 bb       	out	0x12, r24	; 18
 1f8:	06 c0       	rjmp	.+12     	; 0x206 <__vector_9+0x28>
	  } 
	  else if(OCR2 == COMPVALUE2)
 1fa:	83 b5       	in	r24, 0x23	; 35
 1fc:	83 3c       	cpi	r24, 0xC3	; 195
 1fe:	19 f4       	brne	.+6      	; 0x206 <__vector_9+0x28>
	  {
		OCR2 = COMPVALUE1;
 200:	85 e7       	ldi	r24, 0x75	; 117
 202:	83 bd       	out	0x23, r24	; 35
		PORTD = 0b00000000;
 204:	12 ba       	out	0x12, r1	; 18
	  }
 206:	8f 91       	pop	r24
 208:	0f 90       	pop	r0
 20a:	0f be       	out	0x3f, r0	; 63
 20c:	0f 90       	pop	r0
 20e:	1f 90       	pop	r1
 210:	18 95       	reti

00000212 <main>:
#include <stdio.h>
#include <timerB3.h>

int main ( void )
{
	init_4bits_mode();
 212:	5c df       	rcall	.-328    	; 0xcc <init_4bits_mode>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 214:	2f ef       	ldi	r18, 0xFF	; 255
 216:	83 ed       	ldi	r24, 0xD3	; 211
 218:	90 e3       	ldi	r25, 0x30	; 48
 21a:	21 50       	subi	r18, 0x01	; 1
 21c:	80 40       	sbci	r24, 0x00	; 0
 21e:	90 40       	sbci	r25, 0x00	; 0
 220:	e1 f7       	brne	.-8      	; 0x21a <main+0x8>
 222:	00 c0       	rjmp	.+0      	; 0x224 <main+0x12>
 224:	00 00       	nop
	_delay_ms(2000);
	lcd_write_command(0);
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	7e df       	rcall	.-260    	; 0x126 <lcd_write_command>
	lcd_write_command(1);
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	7c df       	rcall	.-264    	; 0x126 <lcd_write_command>
 22e:	ef e3       	ldi	r30, 0x3F	; 63
 230:	fc e9       	ldi	r31, 0x9C	; 156
 232:	31 97       	sbiw	r30, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <main+0x20>
 236:	00 c0       	rjmp	.+0      	; 0x238 <main+0x26>
 238:	00 00       	nop
	_delay_ms(20);
	
	timer2init();
 23a:	b6 df       	rcall	.-148    	; 0x1a8 <timer2init>
	sei();
 23c:	78 94       	sei
	while(1)
	{
		char counter = *getCounterValue();
 23e:	b1 df       	rcall	.-158    	; 0x1a2 <getCounterValue>
		lcd_assignmentb2((counter&0x0F)+'0');
 240:	fc 01       	movw	r30, r24
 242:	80 81       	ld	r24, Z
 244:	8f 70       	andi	r24, 0x0F	; 15
 246:	80 5d       	subi	r24, 0xD0	; 208
 248:	59 df       	rcall	.-334    	; 0xfc <lcd_assignmentb2>
		set_cursor(0);
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	77 df       	rcall	.-274    	; 0x13e <set_cursor>
 250:	ff ef       	ldi	r31, 0xFF	; 255
 252:	29 e6       	ldi	r18, 0x69	; 105
 254:	88 e1       	ldi	r24, 0x18	; 24
 256:	f1 50       	subi	r31, 0x01	; 1
 258:	20 40       	sbci	r18, 0x00	; 0
 25a:	80 40       	sbci	r24, 0x00	; 0
 25c:	e1 f7       	brne	.-8      	; 0x256 <main+0x44>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <main+0x4e>
 260:	00 00       	nop
 262:	ed cf       	rjmp	.-38     	; 0x23e <main+0x2c>

00000264 <_exit>:
 264:	f8 94       	cli

00000266 <__stop_program>:
 266:	ff cf       	rjmp	.-2      	; 0x266 <__stop_program>
