
AssignmentC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000804  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007b0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000804  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000834  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000870  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ddc  00000000  00000000  000008e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000922  00000000  00000000  000016c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000702  00000000  00000000  00001fe6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000124  00000000  00000000  000026e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00007780  00000000  00000000  0000280c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000296  00000000  00000000  00009f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  0000a222  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000003d7  00000000  00000000  0000a2a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	72 c0       	rjmp	.+228    	; 0xe6 <__ctors_end>
   2:	00 00       	nop
   4:	78 c0       	rjmp	.+240    	; 0xf6 <__bad_interrupt>
   6:	00 00       	nop
   8:	76 c0       	rjmp	.+236    	; 0xf6 <__bad_interrupt>
   a:	00 00       	nop
   c:	74 c0       	rjmp	.+232    	; 0xf6 <__bad_interrupt>
   e:	00 00       	nop
  10:	72 c0       	rjmp	.+228    	; 0xf6 <__bad_interrupt>
  12:	00 00       	nop
  14:	70 c0       	rjmp	.+224    	; 0xf6 <__bad_interrupt>
  16:	00 00       	nop
  18:	6e c0       	rjmp	.+220    	; 0xf6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6c c0       	rjmp	.+216    	; 0xf6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6a c0       	rjmp	.+212    	; 0xf6 <__bad_interrupt>
  22:	00 00       	nop
  24:	68 c0       	rjmp	.+208    	; 0xf6 <__bad_interrupt>
  26:	00 00       	nop
  28:	66 c0       	rjmp	.+204    	; 0xf6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	64 c0       	rjmp	.+200    	; 0xf6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	62 c0       	rjmp	.+196    	; 0xf6 <__bad_interrupt>
  32:	00 00       	nop
  34:	60 c0       	rjmp	.+192    	; 0xf6 <__bad_interrupt>
  36:	00 00       	nop
  38:	5e c0       	rjmp	.+188    	; 0xf6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5c c0       	rjmp	.+184    	; 0xf6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5a c0       	rjmp	.+180    	; 0xf6 <__bad_interrupt>
  42:	00 00       	nop
  44:	58 c0       	rjmp	.+176    	; 0xf6 <__bad_interrupt>
  46:	00 00       	nop
  48:	56 c0       	rjmp	.+172    	; 0xf6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	54 c0       	rjmp	.+168    	; 0xf6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	52 c0       	rjmp	.+164    	; 0xf6 <__bad_interrupt>
  52:	00 00       	nop
  54:	50 c0       	rjmp	.+160    	; 0xf6 <__bad_interrupt>
  56:	00 00       	nop
  58:	4e c0       	rjmp	.+156    	; 0xf6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4c c0       	rjmp	.+152    	; 0xf6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4a c0       	rjmp	.+148    	; 0xf6 <__bad_interrupt>
  62:	00 00       	nop
  64:	48 c0       	rjmp	.+144    	; 0xf6 <__bad_interrupt>
  66:	00 00       	nop
  68:	46 c0       	rjmp	.+140    	; 0xf6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	44 c0       	rjmp	.+136    	; 0xf6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	42 c0       	rjmp	.+132    	; 0xf6 <__bad_interrupt>
  72:	00 00       	nop
  74:	40 c0       	rjmp	.+128    	; 0xf6 <__bad_interrupt>
  76:	00 00       	nop
  78:	3e c0       	rjmp	.+124    	; 0xf6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3c c0       	rjmp	.+120    	; 0xf6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3a c0       	rjmp	.+116    	; 0xf6 <__bad_interrupt>
  82:	00 00       	nop
  84:	38 c0       	rjmp	.+112    	; 0xf6 <__bad_interrupt>
  86:	00 00       	nop
  88:	36 c0       	rjmp	.+108    	; 0xf6 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	08 00       	.word	0x0008	; ????
  8e:	00 00       	nop
  90:	be 92       	st	-X, r11
  92:	24 49       	sbci	r18, 0x94	; 148
  94:	12 3e       	cpi	r17, 0xE2	; 226
  96:	ab aa       	std	Y+51, r10	; 0x33
  98:	aa 2a       	or	r10, r26
  9a:	be cd       	rjmp	.-1156   	; 0xfffffc18 <__eeprom_end+0xff7efc18>
  9c:	cc cc       	rjmp	.-1640   	; 0xfffffa36 <__eeprom_end+0xff7efa36>
  9e:	4c 3e       	cpi	r20, 0xEC	; 236
  a0:	00 00       	nop
  a2:	00 80       	ld	r0, Z
  a4:	be ab       	std	Y+54, r27	; 0x36
  a6:	aa aa       	std	Y+50, r10	; 0x32
  a8:	aa 3e       	cpi	r26, 0xEA	; 234
  aa:	00 00       	nop
  ac:	00 00       	nop
  ae:	bf 00       	.word	0x00bf	; ????
  b0:	00 00       	nop
  b2:	80 3f       	cpi	r24, 0xF0	; 240
  b4:	00 00       	nop
  b6:	00 00       	nop
  b8:	00 08       	sbc	r0, r0
  ba:	41 78       	andi	r20, 0x81	; 129
  bc:	d3 bb       	out	0x13, r29	; 19
  be:	43 87       	std	Z+11, r20	; 0x0b
  c0:	d1 13       	cpse	r29, r17
  c2:	3d 19       	sub	r19, r13
  c4:	0e 3c       	cpi	r16, 0xCE	; 206
  c6:	c3 bd       	out	0x23, r28	; 35
  c8:	42 82       	std	Z+2, r4	; 0x02
  ca:	ad 2b       	or	r26, r29
  cc:	3e 68       	ori	r19, 0x8E	; 142
  ce:	ec 82       	std	Y+4, r14	; 0x04
  d0:	76 be       	out	0x36, r7	; 54
  d2:	d9 8f       	std	Y+25, r29	; 0x19
  d4:	e1 a9       	ldd	r30, Z+49	; 0x31
  d6:	3e 4c       	sbci	r19, 0xCE	; 206
  d8:	80 ef       	ldi	r24, 0xF0	; 240
  da:	ff be       	out	0x3f, r15	; 63
  dc:	01 c4       	rjmp	.+2050   	; 0x8e0 <_etext+0x130>
  de:	ff 7f       	andi	r31, 0xFF	; 255
  e0:	3f 00       	.word	0x003f	; ????
  e2:	00 00       	nop
	...

000000e6 <__ctors_end>:
  e6:	11 24       	eor	r1, r1
  e8:	1f be       	out	0x3f, r1	; 63
  ea:	cf ef       	ldi	r28, 0xFF	; 255
  ec:	d0 e1       	ldi	r29, 0x10	; 16
  ee:	de bf       	out	0x3e, r29	; 62
  f0:	cd bf       	out	0x3d, r28	; 61
  f2:	cd d0       	rcall	.+410    	; 0x28e <main>
  f4:	5b c3       	rjmp	.+1718   	; 0x7ac <_exit>

000000f6 <__bad_interrupt>:
  f6:	84 cf       	rjmp	.-248    	; 0x0 <__vectors>

000000f8 <wait>:
void displayOff()
{
	spi_slaveSelect(0); // Select display chip
	spi_write(0x0C); // Register 0B: Shutdown register
	spi_write(0x00); // -> 1 = Normal operation
	spi_slaveDeSelect(0); // Deselect display chip
  f8:	18 16       	cp	r1, r24
  fa:	19 06       	cpc	r1, r25
  fc:	6c f4       	brge	.+26     	; 0x118 <wait+0x20>
  fe:	20 e0       	ldi	r18, 0x00	; 0
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	ef ec       	ldi	r30, 0xCF	; 207
 104:	f7 e0       	ldi	r31, 0x07	; 7
 106:	31 97       	sbiw	r30, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <wait+0xe>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <wait+0x14>
 10c:	00 00       	nop
 10e:	2f 5f       	subi	r18, 0xFF	; 255
 110:	3f 4f       	sbci	r19, 0xFF	; 255
 112:	28 17       	cp	r18, r24
 114:	39 07       	cpc	r19, r25
 116:	a9 f7       	brne	.-22     	; 0x102 <wait+0xa>
 118:	08 95       	ret

0000011a <spi_masterInit>:
 11a:	8f ef       	ldi	r24, 0xFF	; 255
 11c:	87 bb       	out	0x17, r24	; 23
 11e:	bb 98       	cbi	0x17, 3	; 23
 120:	c0 9a       	sbi	0x18, 0	; 24
 122:	82 e5       	ldi	r24, 0x52	; 82
 124:	8d b9       	out	0x0d, r24	; 13
 126:	08 95       	ret

00000128 <spi_write>:
 128:	8f b9       	out	0x0f, r24	; 15
 12a:	77 9b       	sbis	0x0e, 7	; 14
 12c:	fe cf       	rjmp	.-4      	; 0x12a <spi_write+0x2>
 12e:	08 95       	ret

00000130 <spi_slaveSelect>:
 130:	98 b3       	in	r25, 0x18	; 24
 132:	21 e0       	ldi	r18, 0x01	; 1
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	02 c0       	rjmp	.+4      	; 0x13c <spi_slaveSelect+0xc>
 138:	22 0f       	add	r18, r18
 13a:	33 1f       	adc	r19, r19
 13c:	8a 95       	dec	r24
 13e:	e2 f7       	brpl	.-8      	; 0x138 <spi_slaveSelect+0x8>
 140:	20 95       	com	r18
 142:	29 23       	and	r18, r25
 144:	28 bb       	out	0x18, r18	; 24
 146:	08 95       	ret

00000148 <spi_slaveDeSelect>:
 148:	98 b3       	in	r25, 0x18	; 24
 14a:	21 e0       	ldi	r18, 0x01	; 1
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	02 c0       	rjmp	.+4      	; 0x154 <spi_slaveDeSelect+0xc>
 150:	22 0f       	add	r18, r18
 152:	33 1f       	adc	r19, r19
 154:	8a 95       	dec	r24
 156:	e2 f7       	brpl	.-8      	; 0x150 <spi_slaveDeSelect+0x8>
 158:	29 2b       	or	r18, r25
 15a:	28 bb       	out	0x18, r18	; 24
 15c:	08 95       	ret

0000015e <displayDriverInit>:
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	e7 df       	rcall	.-50     	; 0x130 <spi_slaveSelect>
 162:	89 e0       	ldi	r24, 0x09	; 9
 164:	e1 df       	rcall	.-62     	; 0x128 <spi_write>
 166:	8f ef       	ldi	r24, 0xFF	; 255
 168:	df df       	rcall	.-66     	; 0x128 <spi_write>
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	ed df       	rcall	.-38     	; 0x148 <spi_slaveDeSelect>
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	df df       	rcall	.-66     	; 0x130 <spi_slaveSelect>
 172:	8a e0       	ldi	r24, 0x0A	; 10
 174:	d9 df       	rcall	.-78     	; 0x128 <spi_write>
 176:	8f e0       	ldi	r24, 0x0F	; 15
 178:	d7 df       	rcall	.-82     	; 0x128 <spi_write>
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	e5 df       	rcall	.-54     	; 0x148 <spi_slaveDeSelect>
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	d7 df       	rcall	.-82     	; 0x130 <spi_slaveSelect>
 182:	8b e0       	ldi	r24, 0x0B	; 11
 184:	d1 df       	rcall	.-94     	; 0x128 <spi_write>
 186:	83 e0       	ldi	r24, 0x03	; 3
 188:	cf df       	rcall	.-98     	; 0x128 <spi_write>
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	dd df       	rcall	.-70     	; 0x148 <spi_slaveDeSelect>
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	cf df       	rcall	.-98     	; 0x130 <spi_slaveSelect>
 192:	8c e0       	ldi	r24, 0x0C	; 12
 194:	c9 df       	rcall	.-110    	; 0x128 <spi_write>
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	c7 df       	rcall	.-114    	; 0x128 <spi_write>
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	d5 cf       	rjmp	.-86     	; 0x148 <spi_slaveDeSelect>
 19e:	08 95       	ret

000001a0 <spi_writeWord>:
}

void spi_writeWord(unsigned char adress, unsigned char data)
{
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	d8 2f       	mov	r29, r24
 1a6:	c6 2f       	mov	r28, r22
	spi_slaveSelect(0); // Select display chip
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	c2 df       	rcall	.-124    	; 0x130 <spi_slaveSelect>
	spi_write(adress); // digit adress
 1ac:	8d 2f       	mov	r24, r29
 1ae:	bc df       	rcall	.-136    	; 0x128 <spi_write>
	spi_write(data); // digit value
 1b0:	8c 2f       	mov	r24, r28
 1b2:	ba df       	rcall	.-140    	; 0x128 <spi_write>
	spi_slaveDeSelect(0); // Deselect display chip
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	c8 df       	rcall	.-112    	; 0x148 <spi_slaveDeSelect>
}
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	08 95       	ret

000001be <writeLedDisplay>:

void writeLedDisplay(int value)
{
 1be:	8f 92       	push	r8
 1c0:	9f 92       	push	r9
 1c2:	af 92       	push	r10
 1c4:	bf 92       	push	r11
 1c6:	cf 92       	push	r12
 1c8:	df 92       	push	r13
 1ca:	ef 92       	push	r14
 1cc:	ff 92       	push	r15
 1ce:	0f 93       	push	r16
 1d0:	1f 93       	push	r17
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	ec 01       	movw	r28, r24
	bool negative = value < 0; // check if value is negative
	int length = floor(log10(abs(value))) + 1; // check how long the int is
 1d8:	bc 01       	movw	r22, r24
 1da:	99 23       	and	r25, r25
 1dc:	24 f4       	brge	.+8      	; 0x1e6 <writeLedDisplay+0x28>
 1de:	66 27       	eor	r22, r22
 1e0:	77 27       	eor	r23, r23
 1e2:	68 1b       	sub	r22, r24
 1e4:	79 0b       	sbc	r23, r25
 1e6:	06 2f       	mov	r16, r22
 1e8:	17 2f       	mov	r17, r23
 1ea:	07 2e       	mov	r0, r23
 1ec:	00 0c       	add	r0, r0
 1ee:	88 0b       	sbc	r24, r24
 1f0:	99 0b       	sbc	r25, r25
 1f2:	03 d1       	rcall	.+518    	; 0x3fa <__floatsisf>
 1f4:	e1 d1       	rcall	.+962    	; 0x5b8 <log10>
 1f6:	3c d1       	rcall	.+632    	; 0x470 <floor>
 1f8:	20 e0       	ldi	r18, 0x00	; 0
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	40 e8       	ldi	r20, 0x80	; 128
 1fe:	5f e3       	ldi	r21, 0x3F	; 63
 200:	65 d0       	rcall	.+202    	; 0x2cc <__addsf3>
 202:	c8 d0       	rcall	.+400    	; 0x394 <__fixsfsi>
 204:	96 2e       	mov	r9, r22
 206:	e6 2e       	mov	r14, r22
 208:	f7 2e       	mov	r15, r23
	if(length > 4 || (negative && length > 3)) // check whether it is too big
 20a:	85 e0       	ldi	r24, 0x05	; 5
 20c:	e8 16       	cp	r14, r24
 20e:	f1 04       	cpc	r15, r1
 210:	8c f5       	brge	.+98     	; 0x274 <writeLedDisplay+0xb6>
	spi_slaveDeSelect(0); // Deselect display chip
}

void writeLedDisplay(int value)
{
	bool negative = value < 0; // check if value is negative
 212:	8d 2e       	mov	r8, r29
 214:	88 1c       	adc	r8, r8
 216:	88 24       	eor	r8, r8
 218:	88 1c       	adc	r8, r8
	int length = floor(log10(abs(value))) + 1; // check how long the int is
	if(length > 4 || (negative && length > 3)) // check whether it is too big
 21a:	31 f0       	breq	.+12     	; 0x228 <writeLedDisplay+0x6a>
 21c:	84 e0       	ldi	r24, 0x04	; 4
 21e:	e8 16       	cp	r14, r24
 220:	f1 04       	cpc	r15, r1
 222:	44 f5       	brge	.+80     	; 0x274 <writeLedDisplay+0xb6>
	return;

	if(negative) // if it is negative turn it positive
	value = abs(value);
 224:	c0 2f       	mov	r28, r16
 226:	d1 2f       	mov	r29, r17
 228:	01 e0       	ldi	r16, 0x01	; 1
 22a:	10 e0       	ldi	r17, 0x00	; 0

	for(int i = 1; i<5; i++){	//for each number in the int print
		int digit = value % 10; // cycle through the numbers
		value /= 10;
 22c:	0f 2e       	mov	r0, r31
 22e:	fa e0       	ldi	r31, 0x0A	; 10
 230:	af 2e       	mov	r10, r31
 232:	b1 2c       	mov	r11, r1
 234:	f0 2d       	mov	r31, r0
 236:	ce 01       	movw	r24, r28
 238:	b5 01       	movw	r22, r10
 23a:	91 d2       	rcall	.+1314   	; 0x75e <__divmodhi4>
 23c:	c6 2e       	mov	r12, r22
 23e:	d7 2e       	mov	r13, r23
		if(i>length)
 240:	e0 16       	cp	r14, r16
 242:	f1 06       	cpc	r15, r17
 244:	24 f4       	brge	.+8      	; 0x24e <writeLedDisplay+0x90>
		spi_writeWord(i,0b1111); // if number is over print blank
 246:	6f e0       	ldi	r22, 0x0F	; 15
 248:	80 2f       	mov	r24, r16
 24a:	aa df       	rcall	.-172    	; 0x1a0 <spi_writeWord>
 24c:	06 c0       	rjmp	.+12     	; 0x25a <writeLedDisplay+0x9c>

	if(negative) // if it is negative turn it positive
	value = abs(value);

	for(int i = 1; i<5; i++){	//for each number in the int print
		int digit = value % 10; // cycle through the numbers
 24e:	ce 01       	movw	r24, r28
 250:	b5 01       	movw	r22, r10
 252:	85 d2       	rcall	.+1290   	; 0x75e <__divmodhi4>
		value /= 10;
		if(i>length)
		spi_writeWord(i,0b1111); // if number is over print blank
		else
		spi_writeWord(i, (digit)); // else print the number
 254:	68 2f       	mov	r22, r24
 256:	80 2f       	mov	r24, r16
 258:	a3 df       	rcall	.-186    	; 0x1a0 <spi_writeWord>
	return;

	if(negative) // if it is negative turn it positive
	value = abs(value);

	for(int i = 1; i<5; i++){	//for each number in the int print
 25a:	0f 5f       	subi	r16, 0xFF	; 255
 25c:	1f 4f       	sbci	r17, 0xFF	; 255
		int digit = value % 10; // cycle through the numbers
		value /= 10;
 25e:	cc 2d       	mov	r28, r12
 260:	dd 2d       	mov	r29, r13
	return;

	if(negative) // if it is negative turn it positive
	value = abs(value);

	for(int i = 1; i<5; i++){	//for each number in the int print
 262:	05 30       	cpi	r16, 0x05	; 5
 264:	11 05       	cpc	r17, r1
 266:	39 f7       	brne	.-50     	; 0x236 <writeLedDisplay+0x78>
		if(i>length)
		spi_writeWord(i,0b1111); // if number is over print blank
		else
		spi_writeWord(i, (digit)); // else print the number
	}
	if(negative)
 268:	88 20       	and	r8, r8
 26a:	21 f0       	breq	.+8      	; 0x274 <writeLedDisplay+0xb6>
	spi_writeWord(length+1,0b1010); // if it is a negative print a 'minus' sign
 26c:	6a e0       	ldi	r22, 0x0A	; 10
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	89 0d       	add	r24, r9
 272:	96 df       	rcall	.-212    	; 0x1a0 <spi_writeWord>
}
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	1f 91       	pop	r17
 27a:	0f 91       	pop	r16
 27c:	ff 90       	pop	r15
 27e:	ef 90       	pop	r14
 280:	df 90       	pop	r13
 282:	cf 90       	pop	r12
 284:	bf 90       	pop	r11
 286:	af 90       	pop	r10
 288:	9f 90       	pop	r9
 28a:	8f 90       	pop	r8
 28c:	08 95       	ret

0000028e <main>:

int main(void)
{
 28e:	cf 93       	push	r28
	DDRB=0x01; // Set PB0 pin as output for display select
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	87 bb       	out	0x17, r24	; 23
	spi_masterInit(); // Initialize spi module
 294:	42 df       	rcall	.-380    	; 0x11a <spi_masterInit>
	displayDriverInit(); // Initialize display chip
 296:	63 df       	rcall	.-314    	; 0x15e <displayDriverInit>
	// clear display (all zero's)
	for (char i =1; i<=4; i++)
 298:	c1 e0       	ldi	r28, 0x01	; 1
	{
		spi_slaveSelect(0); // Select display chip
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	49 df       	rcall	.-366    	; 0x130 <spi_slaveSelect>
		spi_write(i); // digit adress: (digit place)
 29e:	8c 2f       	mov	r24, r28
 2a0:	43 df       	rcall	.-378    	; 0x128 <spi_write>
		spi_write(0); // digit value: 0
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	41 df       	rcall	.-382    	; 0x128 <spi_write>
		spi_slaveDeSelect(0); // Deselect display chip
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	4f df       	rcall	.-354    	; 0x148 <spi_slaveDeSelect>
 2aa:	cf 5f       	subi	r28, 0xFF	; 255
{
	DDRB=0x01; // Set PB0 pin as output for display select
	spi_masterInit(); // Initialize spi module
	displayDriverInit(); // Initialize display chip
	// clear display (all zero's)
	for (char i =1; i<=4; i++)
 2ac:	c5 30       	cpi	r28, 0x05	; 5
 2ae:	a9 f7       	brne	.-22     	; 0x29a <main+0xc>
		spi_slaveSelect(0); // Select display chip
		spi_write(i); // digit adress: (digit place)
		spi_write(0); // digit value: 0
		spi_slaveDeSelect(0); // Deselect display chip
	}
	wait(1000);
 2b0:	88 ee       	ldi	r24, 0xE8	; 232
 2b2:	93 e0       	ldi	r25, 0x03	; 3
 2b4:	21 df       	rcall	.-446    	; 0xf8 <wait>
	// write 4-digit data
	writeLedDisplay(-468);
 2b6:	8c e2       	ldi	r24, 0x2C	; 44
 2b8:	9e ef       	ldi	r25, 0xFE	; 254
 2ba:	81 df       	rcall	.-254    	; 0x1be <writeLedDisplay>

	wait(1000);
 2bc:	88 ee       	ldi	r24, 0xE8	; 232
 2be:	93 e0       	ldi	r25, 0x03	; 3
 2c0:	1b df       	rcall	.-458    	; 0xf8 <wait>
	return (1);
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	cf 91       	pop	r28
 2c8:	08 95       	ret

000002ca <__subsf3>:
 2ca:	50 58       	subi	r21, 0x80	; 128

000002cc <__addsf3>:
 2cc:	bb 27       	eor	r27, r27
 2ce:	aa 27       	eor	r26, r26
 2d0:	0e d0       	rcall	.+28     	; 0x2ee <__addsf3x>
 2d2:	21 c1       	rjmp	.+578    	; 0x516 <__fp_round>
 2d4:	12 d1       	rcall	.+548    	; 0x4fa <__fp_pscA>
 2d6:	30 f0       	brcs	.+12     	; 0x2e4 <__addsf3+0x18>
 2d8:	17 d1       	rcall	.+558    	; 0x508 <__fp_pscB>
 2da:	20 f0       	brcs	.+8      	; 0x2e4 <__addsf3+0x18>
 2dc:	31 f4       	brne	.+12     	; 0x2ea <__addsf3+0x1e>
 2de:	9f 3f       	cpi	r25, 0xFF	; 255
 2e0:	11 f4       	brne	.+4      	; 0x2e6 <__addsf3+0x1a>
 2e2:	1e f4       	brtc	.+6      	; 0x2ea <__addsf3+0x1e>
 2e4:	07 c1       	rjmp	.+526    	; 0x4f4 <__fp_nan>
 2e6:	0e f4       	brtc	.+2      	; 0x2ea <__addsf3+0x1e>
 2e8:	e0 95       	com	r30
 2ea:	e7 fb       	bst	r30, 7
 2ec:	d4 c0       	rjmp	.+424    	; 0x496 <__fp_inf>

000002ee <__addsf3x>:
 2ee:	e9 2f       	mov	r30, r25
 2f0:	23 d1       	rcall	.+582    	; 0x538 <__fp_split3>
 2f2:	80 f3       	brcs	.-32     	; 0x2d4 <__addsf3+0x8>
 2f4:	ba 17       	cp	r27, r26
 2f6:	62 07       	cpc	r22, r18
 2f8:	73 07       	cpc	r23, r19
 2fa:	84 07       	cpc	r24, r20
 2fc:	95 07       	cpc	r25, r21
 2fe:	18 f0       	brcs	.+6      	; 0x306 <__addsf3x+0x18>
 300:	71 f4       	brne	.+28     	; 0x31e <__addsf3x+0x30>
 302:	9e f5       	brtc	.+102    	; 0x36a <__addsf3x+0x7c>
 304:	52 c1       	rjmp	.+676    	; 0x5aa <__fp_zero>
 306:	0e f4       	brtc	.+2      	; 0x30a <__addsf3x+0x1c>
 308:	e0 95       	com	r30
 30a:	0b 2e       	mov	r0, r27
 30c:	ba 2f       	mov	r27, r26
 30e:	a0 2d       	mov	r26, r0
 310:	0b 01       	movw	r0, r22
 312:	b9 01       	movw	r22, r18
 314:	90 01       	movw	r18, r0
 316:	0c 01       	movw	r0, r24
 318:	ca 01       	movw	r24, r20
 31a:	a0 01       	movw	r20, r0
 31c:	11 24       	eor	r1, r1
 31e:	ff 27       	eor	r31, r31
 320:	59 1b       	sub	r21, r25
 322:	99 f0       	breq	.+38     	; 0x34a <__addsf3x+0x5c>
 324:	59 3f       	cpi	r21, 0xF9	; 249
 326:	50 f4       	brcc	.+20     	; 0x33c <__addsf3x+0x4e>
 328:	50 3e       	cpi	r21, 0xE0	; 224
 32a:	68 f1       	brcs	.+90     	; 0x386 <__addsf3x+0x98>
 32c:	1a 16       	cp	r1, r26
 32e:	f0 40       	sbci	r31, 0x00	; 0
 330:	a2 2f       	mov	r26, r18
 332:	23 2f       	mov	r18, r19
 334:	34 2f       	mov	r19, r20
 336:	44 27       	eor	r20, r20
 338:	58 5f       	subi	r21, 0xF8	; 248
 33a:	f3 cf       	rjmp	.-26     	; 0x322 <__addsf3x+0x34>
 33c:	46 95       	lsr	r20
 33e:	37 95       	ror	r19
 340:	27 95       	ror	r18
 342:	a7 95       	ror	r26
 344:	f0 40       	sbci	r31, 0x00	; 0
 346:	53 95       	inc	r21
 348:	c9 f7       	brne	.-14     	; 0x33c <__addsf3x+0x4e>
 34a:	7e f4       	brtc	.+30     	; 0x36a <__addsf3x+0x7c>
 34c:	1f 16       	cp	r1, r31
 34e:	ba 0b       	sbc	r27, r26
 350:	62 0b       	sbc	r22, r18
 352:	73 0b       	sbc	r23, r19
 354:	84 0b       	sbc	r24, r20
 356:	ba f0       	brmi	.+46     	; 0x386 <__addsf3x+0x98>
 358:	91 50       	subi	r25, 0x01	; 1
 35a:	a1 f0       	breq	.+40     	; 0x384 <__addsf3x+0x96>
 35c:	ff 0f       	add	r31, r31
 35e:	bb 1f       	adc	r27, r27
 360:	66 1f       	adc	r22, r22
 362:	77 1f       	adc	r23, r23
 364:	88 1f       	adc	r24, r24
 366:	c2 f7       	brpl	.-16     	; 0x358 <__addsf3x+0x6a>
 368:	0e c0       	rjmp	.+28     	; 0x386 <__addsf3x+0x98>
 36a:	ba 0f       	add	r27, r26
 36c:	62 1f       	adc	r22, r18
 36e:	73 1f       	adc	r23, r19
 370:	84 1f       	adc	r24, r20
 372:	48 f4       	brcc	.+18     	; 0x386 <__addsf3x+0x98>
 374:	87 95       	ror	r24
 376:	77 95       	ror	r23
 378:	67 95       	ror	r22
 37a:	b7 95       	ror	r27
 37c:	f7 95       	ror	r31
 37e:	9e 3f       	cpi	r25, 0xFE	; 254
 380:	08 f0       	brcs	.+2      	; 0x384 <__addsf3x+0x96>
 382:	b3 cf       	rjmp	.-154    	; 0x2ea <__addsf3+0x1e>
 384:	93 95       	inc	r25
 386:	88 0f       	add	r24, r24
 388:	08 f0       	brcs	.+2      	; 0x38c <__addsf3x+0x9e>
 38a:	99 27       	eor	r25, r25
 38c:	ee 0f       	add	r30, r30
 38e:	97 95       	ror	r25
 390:	87 95       	ror	r24
 392:	08 95       	ret

00000394 <__fixsfsi>:
 394:	04 d0       	rcall	.+8      	; 0x39e <__fixunssfsi>
 396:	68 94       	set
 398:	b1 11       	cpse	r27, r1
 39a:	08 c1       	rjmp	.+528    	; 0x5ac <__fp_szero>
 39c:	08 95       	ret

0000039e <__fixunssfsi>:
 39e:	d4 d0       	rcall	.+424    	; 0x548 <__fp_splitA>
 3a0:	88 f0       	brcs	.+34     	; 0x3c4 <__fixunssfsi+0x26>
 3a2:	9f 57       	subi	r25, 0x7F	; 127
 3a4:	90 f0       	brcs	.+36     	; 0x3ca <__fixunssfsi+0x2c>
 3a6:	b9 2f       	mov	r27, r25
 3a8:	99 27       	eor	r25, r25
 3aa:	b7 51       	subi	r27, 0x17	; 23
 3ac:	a0 f0       	brcs	.+40     	; 0x3d6 <__fixunssfsi+0x38>
 3ae:	d1 f0       	breq	.+52     	; 0x3e4 <__fixunssfsi+0x46>
 3b0:	66 0f       	add	r22, r22
 3b2:	77 1f       	adc	r23, r23
 3b4:	88 1f       	adc	r24, r24
 3b6:	99 1f       	adc	r25, r25
 3b8:	1a f0       	brmi	.+6      	; 0x3c0 <__fixunssfsi+0x22>
 3ba:	ba 95       	dec	r27
 3bc:	c9 f7       	brne	.-14     	; 0x3b0 <__fixunssfsi+0x12>
 3be:	12 c0       	rjmp	.+36     	; 0x3e4 <__fixunssfsi+0x46>
 3c0:	b1 30       	cpi	r27, 0x01	; 1
 3c2:	81 f0       	breq	.+32     	; 0x3e4 <__fixunssfsi+0x46>
 3c4:	f2 d0       	rcall	.+484    	; 0x5aa <__fp_zero>
 3c6:	b1 e0       	ldi	r27, 0x01	; 1
 3c8:	08 95       	ret
 3ca:	ef c0       	rjmp	.+478    	; 0x5aa <__fp_zero>
 3cc:	67 2f       	mov	r22, r23
 3ce:	78 2f       	mov	r23, r24
 3d0:	88 27       	eor	r24, r24
 3d2:	b8 5f       	subi	r27, 0xF8	; 248
 3d4:	39 f0       	breq	.+14     	; 0x3e4 <__fixunssfsi+0x46>
 3d6:	b9 3f       	cpi	r27, 0xF9	; 249
 3d8:	cc f3       	brlt	.-14     	; 0x3cc <__fixunssfsi+0x2e>
 3da:	86 95       	lsr	r24
 3dc:	77 95       	ror	r23
 3de:	67 95       	ror	r22
 3e0:	b3 95       	inc	r27
 3e2:	d9 f7       	brne	.-10     	; 0x3da <__fixunssfsi+0x3c>
 3e4:	3e f4       	brtc	.+14     	; 0x3f4 <__fixunssfsi+0x56>
 3e6:	90 95       	com	r25
 3e8:	80 95       	com	r24
 3ea:	70 95       	com	r23
 3ec:	61 95       	neg	r22
 3ee:	7f 4f       	sbci	r23, 0xFF	; 255
 3f0:	8f 4f       	sbci	r24, 0xFF	; 255
 3f2:	9f 4f       	sbci	r25, 0xFF	; 255
 3f4:	08 95       	ret

000003f6 <__floatunsisf>:
 3f6:	e8 94       	clt
 3f8:	09 c0       	rjmp	.+18     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>

000003fa <__floatsisf>:
 3fa:	97 fb       	bst	r25, 7
 3fc:	3e f4       	brtc	.+14     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3fe:	90 95       	com	r25
 400:	80 95       	com	r24
 402:	70 95       	com	r23
 404:	61 95       	neg	r22
 406:	7f 4f       	sbci	r23, 0xFF	; 255
 408:	8f 4f       	sbci	r24, 0xFF	; 255
 40a:	9f 4f       	sbci	r25, 0xFF	; 255
 40c:	99 23       	and	r25, r25
 40e:	a9 f0       	breq	.+42     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 410:	f9 2f       	mov	r31, r25
 412:	96 e9       	ldi	r25, 0x96	; 150
 414:	bb 27       	eor	r27, r27
 416:	93 95       	inc	r25
 418:	f6 95       	lsr	r31
 41a:	87 95       	ror	r24
 41c:	77 95       	ror	r23
 41e:	67 95       	ror	r22
 420:	b7 95       	ror	r27
 422:	f1 11       	cpse	r31, r1
 424:	f8 cf       	rjmp	.-16     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 426:	fa f4       	brpl	.+62     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 428:	bb 0f       	add	r27, r27
 42a:	11 f4       	brne	.+4      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 42c:	60 ff       	sbrs	r22, 0
 42e:	1b c0       	rjmp	.+54     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 430:	6f 5f       	subi	r22, 0xFF	; 255
 432:	7f 4f       	sbci	r23, 0xFF	; 255
 434:	8f 4f       	sbci	r24, 0xFF	; 255
 436:	9f 4f       	sbci	r25, 0xFF	; 255
 438:	16 c0       	rjmp	.+44     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 43a:	88 23       	and	r24, r24
 43c:	11 f0       	breq	.+4      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 43e:	96 e9       	ldi	r25, 0x96	; 150
 440:	11 c0       	rjmp	.+34     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 442:	77 23       	and	r23, r23
 444:	21 f0       	breq	.+8      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 446:	9e e8       	ldi	r25, 0x8E	; 142
 448:	87 2f       	mov	r24, r23
 44a:	76 2f       	mov	r23, r22
 44c:	05 c0       	rjmp	.+10     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 44e:	66 23       	and	r22, r22
 450:	71 f0       	breq	.+28     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 452:	96 e8       	ldi	r25, 0x86	; 134
 454:	86 2f       	mov	r24, r22
 456:	70 e0       	ldi	r23, 0x00	; 0
 458:	60 e0       	ldi	r22, 0x00	; 0
 45a:	2a f0       	brmi	.+10     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 45c:	9a 95       	dec	r25
 45e:	66 0f       	add	r22, r22
 460:	77 1f       	adc	r23, r23
 462:	88 1f       	adc	r24, r24
 464:	da f7       	brpl	.-10     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 466:	88 0f       	add	r24, r24
 468:	96 95       	lsr	r25
 46a:	87 95       	ror	r24
 46c:	97 f9       	bld	r25, 7
 46e:	08 95       	ret

00000470 <floor>:
 470:	85 d0       	rcall	.+266    	; 0x57c <__fp_trunc>
 472:	80 f0       	brcs	.+32     	; 0x494 <floor+0x24>
 474:	9f 37       	cpi	r25, 0x7F	; 127
 476:	40 f4       	brcc	.+16     	; 0x488 <floor+0x18>
 478:	91 11       	cpse	r25, r1
 47a:	0e f0       	brts	.+2      	; 0x47e <floor+0xe>
 47c:	97 c0       	rjmp	.+302    	; 0x5ac <__fp_szero>
 47e:	60 e0       	ldi	r22, 0x00	; 0
 480:	70 e0       	ldi	r23, 0x00	; 0
 482:	80 e8       	ldi	r24, 0x80	; 128
 484:	9f eb       	ldi	r25, 0xBF	; 191
 486:	08 95       	ret
 488:	26 f4       	brtc	.+8      	; 0x492 <floor+0x22>
 48a:	1b 16       	cp	r1, r27
 48c:	61 1d       	adc	r22, r1
 48e:	71 1d       	adc	r23, r1
 490:	81 1d       	adc	r24, r1
 492:	07 c0       	rjmp	.+14     	; 0x4a2 <__fp_mintl>
 494:	21 c0       	rjmp	.+66     	; 0x4d8 <__fp_mpack>

00000496 <__fp_inf>:
 496:	97 f9       	bld	r25, 7
 498:	9f 67       	ori	r25, 0x7F	; 127
 49a:	80 e8       	ldi	r24, 0x80	; 128
 49c:	70 e0       	ldi	r23, 0x00	; 0
 49e:	60 e0       	ldi	r22, 0x00	; 0
 4a0:	08 95       	ret

000004a2 <__fp_mintl>:
 4a2:	88 23       	and	r24, r24
 4a4:	71 f4       	brne	.+28     	; 0x4c2 <__fp_mintl+0x20>
 4a6:	77 23       	and	r23, r23
 4a8:	21 f0       	breq	.+8      	; 0x4b2 <__fp_mintl+0x10>
 4aa:	98 50       	subi	r25, 0x08	; 8
 4ac:	87 2b       	or	r24, r23
 4ae:	76 2f       	mov	r23, r22
 4b0:	07 c0       	rjmp	.+14     	; 0x4c0 <__fp_mintl+0x1e>
 4b2:	66 23       	and	r22, r22
 4b4:	11 f4       	brne	.+4      	; 0x4ba <__fp_mintl+0x18>
 4b6:	99 27       	eor	r25, r25
 4b8:	0d c0       	rjmp	.+26     	; 0x4d4 <__fp_mintl+0x32>
 4ba:	90 51       	subi	r25, 0x10	; 16
 4bc:	86 2b       	or	r24, r22
 4be:	70 e0       	ldi	r23, 0x00	; 0
 4c0:	60 e0       	ldi	r22, 0x00	; 0
 4c2:	2a f0       	brmi	.+10     	; 0x4ce <__fp_mintl+0x2c>
 4c4:	9a 95       	dec	r25
 4c6:	66 0f       	add	r22, r22
 4c8:	77 1f       	adc	r23, r23
 4ca:	88 1f       	adc	r24, r24
 4cc:	da f7       	brpl	.-10     	; 0x4c4 <__fp_mintl+0x22>
 4ce:	88 0f       	add	r24, r24
 4d0:	96 95       	lsr	r25
 4d2:	87 95       	ror	r24
 4d4:	97 f9       	bld	r25, 7
 4d6:	08 95       	ret

000004d8 <__fp_mpack>:
 4d8:	9f 3f       	cpi	r25, 0xFF	; 255
 4da:	31 f0       	breq	.+12     	; 0x4e8 <__fp_mpack_finite+0xc>

000004dc <__fp_mpack_finite>:
 4dc:	91 50       	subi	r25, 0x01	; 1
 4de:	20 f4       	brcc	.+8      	; 0x4e8 <__fp_mpack_finite+0xc>
 4e0:	87 95       	ror	r24
 4e2:	77 95       	ror	r23
 4e4:	67 95       	ror	r22
 4e6:	b7 95       	ror	r27
 4e8:	88 0f       	add	r24, r24
 4ea:	91 1d       	adc	r25, r1
 4ec:	96 95       	lsr	r25
 4ee:	87 95       	ror	r24
 4f0:	97 f9       	bld	r25, 7
 4f2:	08 95       	ret

000004f4 <__fp_nan>:
 4f4:	9f ef       	ldi	r25, 0xFF	; 255
 4f6:	80 ec       	ldi	r24, 0xC0	; 192
 4f8:	08 95       	ret

000004fa <__fp_pscA>:
 4fa:	00 24       	eor	r0, r0
 4fc:	0a 94       	dec	r0
 4fe:	16 16       	cp	r1, r22
 500:	17 06       	cpc	r1, r23
 502:	18 06       	cpc	r1, r24
 504:	09 06       	cpc	r0, r25
 506:	08 95       	ret

00000508 <__fp_pscB>:
 508:	00 24       	eor	r0, r0
 50a:	0a 94       	dec	r0
 50c:	12 16       	cp	r1, r18
 50e:	13 06       	cpc	r1, r19
 510:	14 06       	cpc	r1, r20
 512:	05 06       	cpc	r0, r21
 514:	08 95       	ret

00000516 <__fp_round>:
 516:	09 2e       	mov	r0, r25
 518:	03 94       	inc	r0
 51a:	00 0c       	add	r0, r0
 51c:	11 f4       	brne	.+4      	; 0x522 <__fp_round+0xc>
 51e:	88 23       	and	r24, r24
 520:	52 f0       	brmi	.+20     	; 0x536 <__fp_round+0x20>
 522:	bb 0f       	add	r27, r27
 524:	40 f4       	brcc	.+16     	; 0x536 <__fp_round+0x20>
 526:	bf 2b       	or	r27, r31
 528:	11 f4       	brne	.+4      	; 0x52e <__fp_round+0x18>
 52a:	60 ff       	sbrs	r22, 0
 52c:	04 c0       	rjmp	.+8      	; 0x536 <__fp_round+0x20>
 52e:	6f 5f       	subi	r22, 0xFF	; 255
 530:	7f 4f       	sbci	r23, 0xFF	; 255
 532:	8f 4f       	sbci	r24, 0xFF	; 255
 534:	9f 4f       	sbci	r25, 0xFF	; 255
 536:	08 95       	ret

00000538 <__fp_split3>:
 538:	57 fd       	sbrc	r21, 7
 53a:	90 58       	subi	r25, 0x80	; 128
 53c:	44 0f       	add	r20, r20
 53e:	55 1f       	adc	r21, r21
 540:	59 f0       	breq	.+22     	; 0x558 <__fp_splitA+0x10>
 542:	5f 3f       	cpi	r21, 0xFF	; 255
 544:	71 f0       	breq	.+28     	; 0x562 <__fp_splitA+0x1a>
 546:	47 95       	ror	r20

00000548 <__fp_splitA>:
 548:	88 0f       	add	r24, r24
 54a:	97 fb       	bst	r25, 7
 54c:	99 1f       	adc	r25, r25
 54e:	61 f0       	breq	.+24     	; 0x568 <__fp_splitA+0x20>
 550:	9f 3f       	cpi	r25, 0xFF	; 255
 552:	79 f0       	breq	.+30     	; 0x572 <__fp_splitA+0x2a>
 554:	87 95       	ror	r24
 556:	08 95       	ret
 558:	12 16       	cp	r1, r18
 55a:	13 06       	cpc	r1, r19
 55c:	14 06       	cpc	r1, r20
 55e:	55 1f       	adc	r21, r21
 560:	f2 cf       	rjmp	.-28     	; 0x546 <__fp_split3+0xe>
 562:	46 95       	lsr	r20
 564:	f1 df       	rcall	.-30     	; 0x548 <__fp_splitA>
 566:	08 c0       	rjmp	.+16     	; 0x578 <__fp_splitA+0x30>
 568:	16 16       	cp	r1, r22
 56a:	17 06       	cpc	r1, r23
 56c:	18 06       	cpc	r1, r24
 56e:	99 1f       	adc	r25, r25
 570:	f1 cf       	rjmp	.-30     	; 0x554 <__fp_splitA+0xc>
 572:	86 95       	lsr	r24
 574:	71 05       	cpc	r23, r1
 576:	61 05       	cpc	r22, r1
 578:	08 94       	sec
 57a:	08 95       	ret

0000057c <__fp_trunc>:
 57c:	e5 df       	rcall	.-54     	; 0x548 <__fp_splitA>
 57e:	a0 f0       	brcs	.+40     	; 0x5a8 <__fp_trunc+0x2c>
 580:	be e7       	ldi	r27, 0x7E	; 126
 582:	b9 17       	cp	r27, r25
 584:	88 f4       	brcc	.+34     	; 0x5a8 <__fp_trunc+0x2c>
 586:	bb 27       	eor	r27, r27
 588:	9f 38       	cpi	r25, 0x8F	; 143
 58a:	60 f4       	brcc	.+24     	; 0x5a4 <__fp_trunc+0x28>
 58c:	16 16       	cp	r1, r22
 58e:	b1 1d       	adc	r27, r1
 590:	67 2f       	mov	r22, r23
 592:	78 2f       	mov	r23, r24
 594:	88 27       	eor	r24, r24
 596:	98 5f       	subi	r25, 0xF8	; 248
 598:	f7 cf       	rjmp	.-18     	; 0x588 <__fp_trunc+0xc>
 59a:	86 95       	lsr	r24
 59c:	77 95       	ror	r23
 59e:	67 95       	ror	r22
 5a0:	b1 1d       	adc	r27, r1
 5a2:	93 95       	inc	r25
 5a4:	96 39       	cpi	r25, 0x96	; 150
 5a6:	c8 f3       	brcs	.-14     	; 0x59a <__fp_trunc+0x1e>
 5a8:	08 95       	ret

000005aa <__fp_zero>:
 5aa:	e8 94       	clt

000005ac <__fp_szero>:
 5ac:	bb 27       	eor	r27, r27
 5ae:	66 27       	eor	r22, r22
 5b0:	77 27       	eor	r23, r23
 5b2:	cb 01       	movw	r24, r22
 5b4:	97 f9       	bld	r25, 7
 5b6:	08 95       	ret

000005b8 <log10>:
 5b8:	0a d0       	rcall	.+20     	; 0x5ce <log>
 5ba:	29 ed       	ldi	r18, 0xD9	; 217
 5bc:	3b e5       	ldi	r19, 0x5B	; 91
 5be:	4e ed       	ldi	r20, 0xDE	; 222
 5c0:	5e e3       	ldi	r21, 0x3E	; 62
 5c2:	45 c0       	rjmp	.+138    	; 0x64e <__mulsf3>
 5c4:	0e f0       	brts	.+2      	; 0x5c8 <log10+0x10>
 5c6:	88 cf       	rjmp	.-240    	; 0x4d8 <__fp_mpack>
 5c8:	95 cf       	rjmp	.-214    	; 0x4f4 <__fp_nan>
 5ca:	68 94       	set
 5cc:	64 cf       	rjmp	.-312    	; 0x496 <__fp_inf>

000005ce <log>:
 5ce:	bc df       	rcall	.-136    	; 0x548 <__fp_splitA>
 5d0:	c8 f3       	brcs	.-14     	; 0x5c4 <log10+0xc>
 5d2:	99 23       	and	r25, r25
 5d4:	d1 f3       	breq	.-12     	; 0x5ca <log10+0x12>
 5d6:	c6 f3       	brts	.-16     	; 0x5c8 <log10+0x10>
 5d8:	df 93       	push	r29
 5da:	cf 93       	push	r28
 5dc:	1f 93       	push	r17
 5de:	0f 93       	push	r16
 5e0:	ff 92       	push	r15
 5e2:	c9 2f       	mov	r28, r25
 5e4:	dd 27       	eor	r29, r29
 5e6:	88 23       	and	r24, r24
 5e8:	2a f0       	brmi	.+10     	; 0x5f4 <log+0x26>
 5ea:	21 97       	sbiw	r28, 0x01	; 1
 5ec:	66 0f       	add	r22, r22
 5ee:	77 1f       	adc	r23, r23
 5f0:	88 1f       	adc	r24, r24
 5f2:	da f7       	brpl	.-10     	; 0x5ea <log+0x1c>
 5f4:	20 e0       	ldi	r18, 0x00	; 0
 5f6:	30 e0       	ldi	r19, 0x00	; 0
 5f8:	40 e8       	ldi	r20, 0x80	; 128
 5fa:	5f eb       	ldi	r21, 0xBF	; 191
 5fc:	9f e3       	ldi	r25, 0x3F	; 63
 5fe:	88 39       	cpi	r24, 0x98	; 152
 600:	20 f0       	brcs	.+8      	; 0x60a <log+0x3c>
 602:	80 3e       	cpi	r24, 0xE0	; 224
 604:	30 f0       	brcs	.+12     	; 0x612 <log+0x44>
 606:	21 96       	adiw	r28, 0x01	; 1
 608:	8f 77       	andi	r24, 0x7F	; 127
 60a:	60 de       	rcall	.-832    	; 0x2cc <__addsf3>
 60c:	ec e8       	ldi	r30, 0x8C	; 140
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	03 c0       	rjmp	.+6      	; 0x618 <log+0x4a>
 612:	5c de       	rcall	.-840    	; 0x2cc <__addsf3>
 614:	e9 eb       	ldi	r30, 0xB9	; 185
 616:	f0 e0       	ldi	r31, 0x00	; 0
 618:	7d d0       	rcall	.+250    	; 0x714 <__fp_powser>
 61a:	8b 01       	movw	r16, r22
 61c:	be 01       	movw	r22, r28
 61e:	ec 01       	movw	r28, r24
 620:	fb 2e       	mov	r15, r27
 622:	6f 57       	subi	r22, 0x7F	; 127
 624:	71 09       	sbc	r23, r1
 626:	75 95       	asr	r23
 628:	77 1f       	adc	r23, r23
 62a:	88 0b       	sbc	r24, r24
 62c:	99 0b       	sbc	r25, r25
 62e:	e5 de       	rcall	.-566    	; 0x3fa <__floatsisf>
 630:	28 e1       	ldi	r18, 0x18	; 24
 632:	32 e7       	ldi	r19, 0x72	; 114
 634:	41 e3       	ldi	r20, 0x31	; 49
 636:	5f e3       	ldi	r21, 0x3F	; 63
 638:	16 d0       	rcall	.+44     	; 0x666 <__mulsf3x>
 63a:	af 2d       	mov	r26, r15
 63c:	98 01       	movw	r18, r16
 63e:	ae 01       	movw	r20, r28
 640:	ff 90       	pop	r15
 642:	0f 91       	pop	r16
 644:	1f 91       	pop	r17
 646:	cf 91       	pop	r28
 648:	df 91       	pop	r29
 64a:	51 de       	rcall	.-862    	; 0x2ee <__addsf3x>
 64c:	64 cf       	rjmp	.-312    	; 0x516 <__fp_round>

0000064e <__mulsf3>:
 64e:	0b d0       	rcall	.+22     	; 0x666 <__mulsf3x>
 650:	62 cf       	rjmp	.-316    	; 0x516 <__fp_round>
 652:	53 df       	rcall	.-346    	; 0x4fa <__fp_pscA>
 654:	28 f0       	brcs	.+10     	; 0x660 <__mulsf3+0x12>
 656:	58 df       	rcall	.-336    	; 0x508 <__fp_pscB>
 658:	18 f0       	brcs	.+6      	; 0x660 <__mulsf3+0x12>
 65a:	95 23       	and	r25, r21
 65c:	09 f0       	breq	.+2      	; 0x660 <__mulsf3+0x12>
 65e:	1b cf       	rjmp	.-458    	; 0x496 <__fp_inf>
 660:	49 cf       	rjmp	.-366    	; 0x4f4 <__fp_nan>
 662:	11 24       	eor	r1, r1
 664:	a3 cf       	rjmp	.-186    	; 0x5ac <__fp_szero>

00000666 <__mulsf3x>:
 666:	68 df       	rcall	.-304    	; 0x538 <__fp_split3>
 668:	a0 f3       	brcs	.-24     	; 0x652 <__mulsf3+0x4>

0000066a <__mulsf3_pse>:
 66a:	95 9f       	mul	r25, r21
 66c:	d1 f3       	breq	.-12     	; 0x662 <__mulsf3+0x14>
 66e:	95 0f       	add	r25, r21
 670:	50 e0       	ldi	r21, 0x00	; 0
 672:	55 1f       	adc	r21, r21
 674:	62 9f       	mul	r22, r18
 676:	f0 01       	movw	r30, r0
 678:	72 9f       	mul	r23, r18
 67a:	bb 27       	eor	r27, r27
 67c:	f0 0d       	add	r31, r0
 67e:	b1 1d       	adc	r27, r1
 680:	63 9f       	mul	r22, r19
 682:	aa 27       	eor	r26, r26
 684:	f0 0d       	add	r31, r0
 686:	b1 1d       	adc	r27, r1
 688:	aa 1f       	adc	r26, r26
 68a:	64 9f       	mul	r22, r20
 68c:	66 27       	eor	r22, r22
 68e:	b0 0d       	add	r27, r0
 690:	a1 1d       	adc	r26, r1
 692:	66 1f       	adc	r22, r22
 694:	82 9f       	mul	r24, r18
 696:	22 27       	eor	r18, r18
 698:	b0 0d       	add	r27, r0
 69a:	a1 1d       	adc	r26, r1
 69c:	62 1f       	adc	r22, r18
 69e:	73 9f       	mul	r23, r19
 6a0:	b0 0d       	add	r27, r0
 6a2:	a1 1d       	adc	r26, r1
 6a4:	62 1f       	adc	r22, r18
 6a6:	83 9f       	mul	r24, r19
 6a8:	a0 0d       	add	r26, r0
 6aa:	61 1d       	adc	r22, r1
 6ac:	22 1f       	adc	r18, r18
 6ae:	74 9f       	mul	r23, r20
 6b0:	33 27       	eor	r19, r19
 6b2:	a0 0d       	add	r26, r0
 6b4:	61 1d       	adc	r22, r1
 6b6:	23 1f       	adc	r18, r19
 6b8:	84 9f       	mul	r24, r20
 6ba:	60 0d       	add	r22, r0
 6bc:	21 1d       	adc	r18, r1
 6be:	82 2f       	mov	r24, r18
 6c0:	76 2f       	mov	r23, r22
 6c2:	6a 2f       	mov	r22, r26
 6c4:	11 24       	eor	r1, r1
 6c6:	9f 57       	subi	r25, 0x7F	; 127
 6c8:	50 40       	sbci	r21, 0x00	; 0
 6ca:	8a f0       	brmi	.+34     	; 0x6ee <__mulsf3_pse+0x84>
 6cc:	e1 f0       	breq	.+56     	; 0x706 <__mulsf3_pse+0x9c>
 6ce:	88 23       	and	r24, r24
 6d0:	4a f0       	brmi	.+18     	; 0x6e4 <__mulsf3_pse+0x7a>
 6d2:	ee 0f       	add	r30, r30
 6d4:	ff 1f       	adc	r31, r31
 6d6:	bb 1f       	adc	r27, r27
 6d8:	66 1f       	adc	r22, r22
 6da:	77 1f       	adc	r23, r23
 6dc:	88 1f       	adc	r24, r24
 6de:	91 50       	subi	r25, 0x01	; 1
 6e0:	50 40       	sbci	r21, 0x00	; 0
 6e2:	a9 f7       	brne	.-22     	; 0x6ce <__mulsf3_pse+0x64>
 6e4:	9e 3f       	cpi	r25, 0xFE	; 254
 6e6:	51 05       	cpc	r21, r1
 6e8:	70 f0       	brcs	.+28     	; 0x706 <__mulsf3_pse+0x9c>
 6ea:	d5 ce       	rjmp	.-598    	; 0x496 <__fp_inf>
 6ec:	5f cf       	rjmp	.-322    	; 0x5ac <__fp_szero>
 6ee:	5f 3f       	cpi	r21, 0xFF	; 255
 6f0:	ec f3       	brlt	.-6      	; 0x6ec <__mulsf3_pse+0x82>
 6f2:	98 3e       	cpi	r25, 0xE8	; 232
 6f4:	dc f3       	brlt	.-10     	; 0x6ec <__mulsf3_pse+0x82>
 6f6:	86 95       	lsr	r24
 6f8:	77 95       	ror	r23
 6fa:	67 95       	ror	r22
 6fc:	b7 95       	ror	r27
 6fe:	f7 95       	ror	r31
 700:	e7 95       	ror	r30
 702:	9f 5f       	subi	r25, 0xFF	; 255
 704:	c1 f7       	brne	.-16     	; 0x6f6 <__mulsf3_pse+0x8c>
 706:	fe 2b       	or	r31, r30
 708:	88 0f       	add	r24, r24
 70a:	91 1d       	adc	r25, r1
 70c:	96 95       	lsr	r25
 70e:	87 95       	ror	r24
 710:	97 f9       	bld	r25, 7
 712:	08 95       	ret

00000714 <__fp_powser>:
 714:	df 93       	push	r29
 716:	cf 93       	push	r28
 718:	1f 93       	push	r17
 71a:	0f 93       	push	r16
 71c:	ff 92       	push	r15
 71e:	ef 92       	push	r14
 720:	df 92       	push	r13
 722:	7b 01       	movw	r14, r22
 724:	8c 01       	movw	r16, r24
 726:	68 94       	set
 728:	05 c0       	rjmp	.+10     	; 0x734 <__fp_powser+0x20>
 72a:	da 2e       	mov	r13, r26
 72c:	ef 01       	movw	r28, r30
 72e:	9b df       	rcall	.-202    	; 0x666 <__mulsf3x>
 730:	fe 01       	movw	r30, r28
 732:	e8 94       	clt
 734:	a5 91       	lpm	r26, Z+
 736:	25 91       	lpm	r18, Z+
 738:	35 91       	lpm	r19, Z+
 73a:	45 91       	lpm	r20, Z+
 73c:	55 91       	lpm	r21, Z+
 73e:	ae f3       	brts	.-22     	; 0x72a <__fp_powser+0x16>
 740:	ef 01       	movw	r28, r30
 742:	d5 dd       	rcall	.-1110   	; 0x2ee <__addsf3x>
 744:	fe 01       	movw	r30, r28
 746:	97 01       	movw	r18, r14
 748:	a8 01       	movw	r20, r16
 74a:	da 94       	dec	r13
 74c:	79 f7       	brne	.-34     	; 0x72c <__fp_powser+0x18>
 74e:	df 90       	pop	r13
 750:	ef 90       	pop	r14
 752:	ff 90       	pop	r15
 754:	0f 91       	pop	r16
 756:	1f 91       	pop	r17
 758:	cf 91       	pop	r28
 75a:	df 91       	pop	r29
 75c:	08 95       	ret

0000075e <__divmodhi4>:
 75e:	97 fb       	bst	r25, 7
 760:	07 2e       	mov	r0, r23
 762:	16 f4       	brtc	.+4      	; 0x768 <__divmodhi4+0xa>
 764:	00 94       	com	r0
 766:	06 d0       	rcall	.+12     	; 0x774 <__divmodhi4_neg1>
 768:	77 fd       	sbrc	r23, 7
 76a:	08 d0       	rcall	.+16     	; 0x77c <__divmodhi4_neg2>
 76c:	0b d0       	rcall	.+22     	; 0x784 <__udivmodhi4>
 76e:	07 fc       	sbrc	r0, 7
 770:	05 d0       	rcall	.+10     	; 0x77c <__divmodhi4_neg2>
 772:	3e f4       	brtc	.+14     	; 0x782 <__divmodhi4_exit>

00000774 <__divmodhi4_neg1>:
 774:	90 95       	com	r25
 776:	81 95       	neg	r24
 778:	9f 4f       	sbci	r25, 0xFF	; 255
 77a:	08 95       	ret

0000077c <__divmodhi4_neg2>:
 77c:	70 95       	com	r23
 77e:	61 95       	neg	r22
 780:	7f 4f       	sbci	r23, 0xFF	; 255

00000782 <__divmodhi4_exit>:
 782:	08 95       	ret

00000784 <__udivmodhi4>:
 784:	aa 1b       	sub	r26, r26
 786:	bb 1b       	sub	r27, r27
 788:	51 e1       	ldi	r21, 0x11	; 17
 78a:	07 c0       	rjmp	.+14     	; 0x79a <__udivmodhi4_ep>

0000078c <__udivmodhi4_loop>:
 78c:	aa 1f       	adc	r26, r26
 78e:	bb 1f       	adc	r27, r27
 790:	a6 17       	cp	r26, r22
 792:	b7 07       	cpc	r27, r23
 794:	10 f0       	brcs	.+4      	; 0x79a <__udivmodhi4_ep>
 796:	a6 1b       	sub	r26, r22
 798:	b7 0b       	sbc	r27, r23

0000079a <__udivmodhi4_ep>:
 79a:	88 1f       	adc	r24, r24
 79c:	99 1f       	adc	r25, r25
 79e:	5a 95       	dec	r21
 7a0:	a9 f7       	brne	.-22     	; 0x78c <__udivmodhi4_loop>
 7a2:	80 95       	com	r24
 7a4:	90 95       	com	r25
 7a6:	bc 01       	movw	r22, r24
 7a8:	cd 01       	movw	r24, r26
 7aa:	08 95       	ret

000007ac <_exit>:
 7ac:	f8 94       	cli

000007ae <__stop_program>:
 7ae:	ff cf       	rjmp	.-2      	; 0x7ae <__stop_program>
