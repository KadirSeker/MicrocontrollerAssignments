
AssignmentB4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000971  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000861  00000000  00000000  00000b75  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002fa  00000000  00000000  000013d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000016d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000450  00000000  00000000  00001704  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000da  00000000  00000000  00001b54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001c2e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	13 d0       	rcall	.+38     	; 0xc0 <main>
  9a:	3e c0       	rjmp	.+124    	; 0x118 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <wait>:
#define F_CPU 8000000
#include <util/delay.h>

 void wait( int ms )
{
	for (int i=0; i<ms; i++)
  9e:	18 16       	cp	r1, r24
  a0:	19 06       	cpc	r1, r25
  a2:	6c f4       	brge	.+26     	; 0xbe <wait+0x20>
  a4:	20 e0       	ldi	r18, 0x00	; 0
  a6:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	ef ec       	ldi	r30, 0xCF	; 207
  aa:	f7 e0       	ldi	r31, 0x07	; 7
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <wait+0xe>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <wait+0x14>
  b2:	00 00       	nop
  b4:	2f 5f       	subi	r18, 0xFF	; 255
  b6:	3f 4f       	sbci	r19, 0xFF	; 255
  b8:	28 17       	cp	r18, r24
  ba:	39 07       	cpc	r19, r25
  bc:	a9 f7       	brne	.-22     	; 0xa8 <wait+0xa>
  be:	08 95       	ret

000000c0 <main>:
	}
}

int main(void)
{
	DDRD = 0b11111111;			// All pins PORTD are set to output
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	81 bb       	out	0x11, r24	; 17
	char standard = 0b00000001;
	
	while (1)
	{
		for(int i = 0; i < 8; i++)
  c4:	e1 2c       	mov	r14, r1
  c6:	f1 2c       	mov	r15, r1
		{
			char light = standard << i;
  c8:	01 e0       	ldi	r16, 0x01	; 1
  ca:	10 e0       	ldi	r17, 0x00	; 0
  cc:	0f 2e       	mov	r0, r31
  ce:	f6 e0       	ldi	r31, 0x06	; 6
  d0:	cf 2e       	mov	r12, r31
  d2:	f0 2d       	mov	r31, r0
  d4:	d1 2c       	mov	r13, r1
	DDRD = 0b11111111;			// All pins PORTD are set to output
	char standard = 0b00000001;
	
	while (1)
	{
		for(int i = 0; i < 8; i++)
  d6:	ce 2d       	mov	r28, r14
  d8:	df 2d       	mov	r29, r15
		{
			char light = standard << i;
  da:	c8 01       	movw	r24, r16
  dc:	0c 2e       	mov	r0, r28
  de:	02 c0       	rjmp	.+4      	; 0xe4 <main+0x24>
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	0a 94       	dec	r0
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <main+0x20>
			PORTD = light;
  e8:	82 bb       	out	0x12, r24	; 18
			wait( 500 );
  ea:	84 ef       	ldi	r24, 0xF4	; 244
  ec:	91 e0       	ldi	r25, 0x01	; 1
  ee:	d7 df       	rcall	.-82     	; 0x9e <wait>
	DDRD = 0b11111111;			// All pins PORTD are set to output
	char standard = 0b00000001;
	
	while (1)
	{
		for(int i = 0; i < 8; i++)
  f0:	21 96       	adiw	r28, 0x01	; 1
  f2:	c8 30       	cpi	r28, 0x08	; 8
  f4:	d1 05       	cpc	r29, r1
  f6:	89 f7       	brne	.-30     	; 0xda <main+0x1a>
  f8:	cc 2d       	mov	r28, r12
  fa:	dd 2d       	mov	r29, r13
			PORTD = light;
			wait( 500 );
		}
		for(int i = 6; i > 0; i--)
		{
			char light = standard << i;
  fc:	c8 01       	movw	r24, r16
  fe:	0c 2e       	mov	r0, r28
 100:	02 c0       	rjmp	.+4      	; 0x106 <main+0x46>
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	0a 94       	dec	r0
 108:	e2 f7       	brpl	.-8      	; 0x102 <main+0x42>
			PORTD = light;
 10a:	82 bb       	out	0x12, r24	; 18
			wait( 500 );
 10c:	84 ef       	ldi	r24, 0xF4	; 244
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	c6 df       	rcall	.-116    	; 0x9e <wait>
		{
			char light = standard << i;
			PORTD = light;
			wait( 500 );
		}
		for(int i = 6; i > 0; i--)
 112:	21 97       	sbiw	r28, 0x01	; 1
 114:	99 f7       	brne	.-26     	; 0xfc <main+0x3c>
 116:	df cf       	rjmp	.-66     	; 0xd6 <main+0x16>

00000118 <_exit>:
 118:	f8 94       	cli

0000011a <__stop_program>:
 11a:	ff cf       	rjmp	.-2      	; 0x11a <__stop_program>
