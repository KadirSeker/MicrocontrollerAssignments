
AssignmentB7a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000186  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000132  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000995  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000082d  00000000  00000000  00000bb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000032e  00000000  00000000  000013de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000170c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000443  00000000  00000000  00001740  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006a  00000000  00000000  00001b83  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001bed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	13 d0       	rcall	.+38     	; 0xc0 <main>
  9a:	49 c0       	rjmp	.+146    	; 0x12e <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <wait>:
#define F_CPU 8000000
#include <util/delay.h>

void wait( int ms )
{
	for (int i=0; i<ms; i++)
  9e:	18 16       	cp	r1, r24
  a0:	19 06       	cpc	r1, r25
  a2:	6c f4       	brge	.+26     	; 0xbe <wait+0x20>
  a4:	20 e0       	ldi	r18, 0x00	; 0
  a6:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	ef ec       	ldi	r30, 0xCF	; 207
  aa:	f7 e0       	ldi	r31, 0x07	; 7
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <wait+0xe>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <wait+0x14>
  b2:	00 00       	nop
  b4:	2f 5f       	subi	r18, 0xFF	; 255
  b6:	3f 4f       	sbci	r19, 0xFF	; 255
  b8:	28 17       	cp	r18, r24
  ba:	39 07       	cpc	r19, r25
  bc:	a9 f7       	brne	.-22     	; 0xa8 <wait+0xa>
  be:	08 95       	ret

000000c0 <main>:
	}
}

int main(void)
{
	DDRD = 0b11111111;				// All pins PORTD are set to output
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	81 bb       	out	0x11, r24	; 17
	DDRC = 0b00000000;				// All pins PORTC are set to input
  c4:	14 ba       	out	0x14, r1	; 20
			PORTD = 0b01010101;
			wait(500);
		}
		else						//Default state - If none of the states above is chosen, execute this.
		{
			PORTD = 0b11111111;
  c6:	cf ef       	ldi	r28, 0xFF	; 255
			PORTD = 0b00000000;
			wait(500);
		}
		else if(PINC & 0b00000010)	//State 3 - If  Button C1 is pressed, execute this
		{
			PORTD = 0b10101010;
  c8:	1a ea       	ldi	r17, 0xAA	; 170
			wait(500);
			PORTD = 0b01010101;
  ca:	d5 e5       	ldi	r29, 0x55	; 85
	
	while(1)
	{
		if((PINC & 0b00000011) == 0b00000011)		//State 1 - If  Button C0 is pressed, execute this
		{
			PORTD = 0b11000011;
  cc:	0f 2e       	mov	r0, r31
  ce:	f3 ec       	ldi	r31, 0xC3	; 195
  d0:	ff 2e       	mov	r15, r31
  d2:	f0 2d       	mov	r31, r0
			wait(500);
			PORTD = 0b00111100;
  d4:	0c e3       	ldi	r16, 0x3C	; 60
	DDRD = 0b11111111;				// All pins PORTD are set to output
	DDRC = 0b00000000;				// All pins PORTC are set to input
	
	while(1)
	{
		if((PINC & 0b00000011) == 0b00000011)		//State 1 - If  Button C0 is pressed, execute this
  d6:	83 b3       	in	r24, 0x13	; 19
  d8:	83 70       	andi	r24, 0x03	; 3
  da:	83 30       	cpi	r24, 0x03	; 3
  dc:	49 f4       	brne	.+18     	; 0xf0 <main+0x30>
		{
			PORTD = 0b11000011;
  de:	f2 ba       	out	0x12, r15	; 18
			wait(500);
  e0:	84 ef       	ldi	r24, 0xF4	; 244
  e2:	91 e0       	ldi	r25, 0x01	; 1
  e4:	dc df       	rcall	.-72     	; 0x9e <wait>
			PORTD = 0b00111100;
  e6:	02 bb       	out	0x12, r16	; 18
			wait(500);
  e8:	84 ef       	ldi	r24, 0xF4	; 244
  ea:	91 e0       	ldi	r25, 0x01	; 1
  ec:	d8 df       	rcall	.-80     	; 0x9e <wait>
  ee:	f3 cf       	rjmp	.-26     	; 0xd6 <main+0x16>
		}
		else if(PINC & 0b00000001)	//State 2 - If  Button C0 is pressed, execute this
  f0:	98 9b       	sbis	0x13, 0	; 19
  f2:	09 c0       	rjmp	.+18     	; 0x106 <main+0x46>
		{
			PORTD = 0b11111111;
  f4:	c2 bb       	out	0x12, r28	; 18
			wait(500);
  f6:	84 ef       	ldi	r24, 0xF4	; 244
  f8:	91 e0       	ldi	r25, 0x01	; 1
  fa:	d1 df       	rcall	.-94     	; 0x9e <wait>
			PORTD = 0b00000000;
  fc:	12 ba       	out	0x12, r1	; 18
			wait(500);
  fe:	84 ef       	ldi	r24, 0xF4	; 244
 100:	91 e0       	ldi	r25, 0x01	; 1
 102:	cd df       	rcall	.-102    	; 0x9e <wait>
 104:	e8 cf       	rjmp	.-48     	; 0xd6 <main+0x16>
		}
		else if(PINC & 0b00000010)	//State 3 - If  Button C1 is pressed, execute this
 106:	99 9b       	sbis	0x13, 1	; 19
 108:	09 c0       	rjmp	.+18     	; 0x11c <main+0x5c>
		{
			PORTD = 0b10101010;
 10a:	12 bb       	out	0x12, r17	; 18
			wait(500);
 10c:	84 ef       	ldi	r24, 0xF4	; 244
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	c6 df       	rcall	.-116    	; 0x9e <wait>
			PORTD = 0b01010101;
 112:	d2 bb       	out	0x12, r29	; 18
			wait(500);
 114:	84 ef       	ldi	r24, 0xF4	; 244
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	c2 df       	rcall	.-124    	; 0x9e <wait>
 11a:	dd cf       	rjmp	.-70     	; 0xd6 <main+0x16>
		}
		else						//Default state - If none of the states above is chosen, execute this.
		{
			PORTD = 0b11111111;
 11c:	c2 bb       	out	0x12, r28	; 18
			wait(125);
 11e:	8d e7       	ldi	r24, 0x7D	; 125
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	bd df       	rcall	.-134    	; 0x9e <wait>
			PORTD = 0b00000000;
 124:	12 ba       	out	0x12, r1	; 18
			wait(125);
 126:	8d e7       	ldi	r24, 0x7D	; 125
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	b9 df       	rcall	.-142    	; 0x9e <wait>
 12c:	d4 cf       	rjmp	.-88     	; 0xd6 <main+0x16>

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>
